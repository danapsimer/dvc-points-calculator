// Code generated by goa v3.8.2, DO NOT EDIT.
//
// points HTTP client CLI support package
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	pointsc "github.com/danapsimer/dvc-points-calculator/api/goa/gen/http/points/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `points (get-resorts|get-resort|get-resort-year|get-point-chart)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` points get-resorts` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		pointsFlags = flag.NewFlagSet("points", flag.ContinueOnError)

		pointsGetResortsFlags = flag.NewFlagSet("get-resorts", flag.ExitOnError)

		pointsGetResortFlags          = flag.NewFlagSet("get-resort", flag.ExitOnError)
		pointsGetResortResortCodeFlag = pointsGetResortFlags.String("resort-code", "REQUIRED", "the resort's code")

		pointsGetResortYearFlags          = flag.NewFlagSet("get-resort-year", flag.ExitOnError)
		pointsGetResortYearResortCodeFlag = pointsGetResortYearFlags.String("resort-code", "REQUIRED", "the resort's code")
		pointsGetResortYearYearFlag       = pointsGetResortYearFlags.String("year", "REQUIRED", "the year")

		pointsGetPointChartFlags          = flag.NewFlagSet("get-point-chart", flag.ExitOnError)
		pointsGetPointChartResortCodeFlag = pointsGetPointChartFlags.String("resort-code", "REQUIRED", "the resort's code")
		pointsGetPointChartYearFlag       = pointsGetPointChartFlags.String("year", "REQUIRED", "the year")
	)
	pointsFlags.Usage = pointsUsage
	pointsGetResortsFlags.Usage = pointsGetResortsUsage
	pointsGetResortFlags.Usage = pointsGetResortUsage
	pointsGetResortYearFlags.Usage = pointsGetResortYearUsage
	pointsGetPointChartFlags.Usage = pointsGetPointChartUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "points":
			svcf = pointsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "points":
			switch epn {
			case "get-resorts":
				epf = pointsGetResortsFlags

			case "get-resort":
				epf = pointsGetResortFlags

			case "get-resort-year":
				epf = pointsGetResortYearFlags

			case "get-point-chart":
				epf = pointsGetPointChartFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "points":
			c := pointsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-resorts":
				endpoint = c.GetResorts()
				data = nil
			case "get-resort":
				endpoint = c.GetResort()
				data, err = pointsc.BuildGetResortPayload(*pointsGetResortResortCodeFlag)
			case "get-resort-year":
				endpoint = c.GetResortYear()
				data, err = pointsc.BuildGetResortYearPayload(*pointsGetResortYearResortCodeFlag, *pointsGetResortYearYearFlag)
			case "get-point-chart":
				endpoint = c.GetPointChart()
				data, err = pointsc.BuildGetPointChartPayload(*pointsGetPointChartResortCodeFlag, *pointsGetPointChartYearFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// pointsUsage displays the usage of the points command and its subcommands.
func pointsUsage() {
	fmt.Fprintf(os.Stderr, `provides resources for manipulating resorts, point charts, and querying stays
Usage:
    %[1]s [globalflags] points COMMAND [flags]

COMMAND:
    get-resorts: GetResorts implements GetResorts.
    get-resort: GetResort implements GetResort.
    get-resort-year: GetResortYear implements GetResortYear.
    get-point-chart: GetPointChart implements GetPointChart.

Additional help:
    %[1]s points COMMAND --help
`, os.Args[0])
}
func pointsGetResortsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] points get-resorts

GetResorts implements GetResorts.

Example:
    %[1]s points get-resorts
`, os.Args[0])
}

func pointsGetResortUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] points get-resort -resort-code STRING

GetResort implements GetResort.
    -resort-code STRING: the resort's code

Example:
    %[1]s points get-resort --resort-code "ssr"
`, os.Args[0])
}

func pointsGetResortYearUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] points get-resort-year -resort-code STRING -year INT

GetResortYear implements GetResortYear.
    -resort-code STRING: the resort's code
    -year INT: the year

Example:
    %[1]s points get-resort-year --resort-code "ssr" --year 2045
`, os.Args[0])
}

func pointsGetPointChartUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] points get-point-chart -resort-code STRING -year INT

GetPointChart implements GetPointChart.
    -resort-code STRING: the resort's code
    -year INT: the year

Example:
    %[1]s points get-point-chart --resort-code "ssr" --year 2098
`, os.Args[0])
}
