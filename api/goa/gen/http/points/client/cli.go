// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points HTTP client CLI support package
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package client

import (
	"fmt"
	"strconv"

	points "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetResortPayload builds the payload for the Points GetResort endpoint
// from CLI flags.
func BuildGetResortPayload(pointsGetResortResortCode string) (*points.GetResortPayload, error) {
	var err error
	var resortCode string
	{
		resortCode = pointsGetResortResortCode
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		if err != nil {
			return nil, err
		}
	}
	v := &points.GetResortPayload{}
	v.ResortCode = resortCode

	return v, nil
}

// BuildGetResortYearPayload builds the payload for the Points GetResortYear
// endpoint from CLI flags.
func BuildGetResortYearPayload(pointsGetResortYearResortCode string, pointsGetResortYearYear string) (*points.GetResortYearPayload, error) {
	var err error
	var resortCode string
	{
		resortCode = pointsGetResortYearResortCode
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		if err != nil {
			return nil, err
		}
	}
	var year int
	{
		var v int64
		v, err = strconv.ParseInt(pointsGetResortYearYear, 10, strconv.IntSize)
		year = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for year, must be INT")
		}
		if year < 1990 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 1990, true))
		}
		if year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 2100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &points.GetResortYearPayload{}
	v.ResortCode = resortCode
	v.Year = year

	return v, nil
}

// BuildGetPointChartPayload builds the payload for the Points GetPointChart
// endpoint from CLI flags.
func BuildGetPointChartPayload(pointsGetPointChartResortCode string, pointsGetPointChartYear string) (*points.GetPointChartPayload, error) {
	var err error
	var resortCode string
	{
		resortCode = pointsGetPointChartResortCode
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		if err != nil {
			return nil, err
		}
	}
	var year int
	{
		var v int64
		v, err = strconv.ParseInt(pointsGetPointChartYear, 10, strconv.IntSize)
		year = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for year, must be INT")
		}
		if year < 1990 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 1990, true))
		}
		if year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 2100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &points.GetPointChartPayload{}
	v.ResortCode = resortCode
	v.Year = year

	return v, nil
}
