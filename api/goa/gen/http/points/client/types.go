// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points HTTP client types
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package client

import (
	points "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points"
	pointsviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points/views"
	"github.com/danapsimer/dvc-points-calculator/model"
	goa "goa.design/goa/v3/pkg"
)

// PutResortRequestBody is the type of the "Points" service "PutResort"
// endpoint HTTP request body.
type PutResortRequestBody struct {
	// The resort's name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetResortsResponseBody is the type of the "Points" service "GetResorts"
// endpoint HTTP response body.
type GetResortsResponseBody []*ResortResultResponse

// GetResortResponseBody is the type of the "Points" service "GetResort"
// endpoint HTTP response body.
type GetResortResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string                 `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// PutResortResponseBody is the type of the "Points" service "PutResort"
// endpoint HTTP response body.
type PutResortResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string                 `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetResortYearResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body.
type GetResortYearResponseBody struct {
	// the year the resort info is for.
	Year *int `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string                 `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetPointChartResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body.
type GetPointChartResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's code
	Resort    *string                 `form:"resort,omitempty" json:"resort,omitempty" xml:"resort,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
	Tiers     []*TierResponseBody     `form:"tiers,omitempty" json:"tiers,omitempty" xml:"tiers,omitempty"`
}

// QueryStayResponseBody is the type of the "Points" service "QueryStay"
// endpoint HTTP response body.
type QueryStayResponseBody struct {
	Rooms map[string]map[string]int `form:"Rooms,omitempty" json:"Rooms,omitempty" xml:"Rooms,omitempty"`
	// Check-in Date
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Check-in Date
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// resorts to include in the search
	IncludeResorts []string `form:"includeResorts,omitempty" json:"includeResorts,omitempty" xml:"includeResorts,omitempty"`
	// resorts to exclude from the search
	ExcludeResorts []string `form:"excludeResorts,omitempty" json:"excludeResorts,omitempty" xml:"excludeResorts,omitempty"`
	// the minimum capacity of room types to include
	MinSleeps *int `form:"minSleeps,omitempty" json:"minSleeps,omitempty" xml:"minSleeps,omitempty"`
	// the maximum capacity of room types to include
	MaxSleeps *int `form:"maxSleeps,omitempty" json:"maxSleeps,omitempty" xml:"maxSleeps,omitempty"`
	// the minimum number of bedrooms of room types to include
	MinBedrooms *int `form:"minBedrooms,omitempty" json:"minBedrooms,omitempty" xml:"minBedrooms,omitempty"`
	// the maximum number of bedrooms of room types to include
	MaxBedrooms *int `form:"maxBedrooms,omitempty" json:"maxBedrooms,omitempty" xml:"maxBedrooms,omitempty"`
	// the minimum number of beds of room types to include
	MinBeds *int `form:"minBeds,omitempty" json:"minBeds,omitempty" xml:"minBeds,omitempty"`
	// the maximum number of beds of room types to include
	MaxBeds *int `form:"maxBeds,omitempty" json:"maxBeds,omitempty" xml:"maxBeds,omitempty"`
}

// GetResortNotFoundResponseBody is the type of the "Points" service
// "GetResort" endpoint HTTP response body for the "not_found" error.
type GetResortNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PutResortNotFoundResponseBody is the type of the "Points" service
// "PutResort" endpoint HTTP response body for the "not_found" error.
type PutResortNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetResortYearNotFoundResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body for the "not_found" error.
type GetResortYearNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetPointChartNotFoundResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body for the "not_found" error.
type GetPointChartNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// QueryStayInvalidInputResponseBody is the type of the "Points" service
// "QueryStay" endpoint HTTP response body for the "invalid_input" error.
type QueryStayInvalidInputResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResortResultResponse is used to define fields on response body types.
type ResortResultResponse struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string             `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponse `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// RoomTypeResponse is used to define fields on response body types.
type RoomTypeResponse struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// RoomTypeResponseBody is used to define fields on response body types.
type RoomTypeResponseBody struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// TierResponseBody is used to define fields on response body types.
type TierResponseBody struct {
	DateRanges     []*TierDateRangeResponseBody               `form:"dateRanges,omitempty" json:"dateRanges,omitempty" xml:"dateRanges,omitempty"`
	RoomTypePoints map[string]*TierRoomTypePointsResponseBody `form:"roomTypePoints,omitempty" json:"roomTypePoints,omitempty" xml:"roomTypePoints,omitempty"`
}

// TierDateRangeResponseBody is used to define fields on response body types.
type TierDateRangeResponseBody struct {
	// start date
	StartDate *model.TierDate `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// end date
	EndDate *model.TierDate `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
}

// TierRoomTypePointsResponseBody is used to define fields on response body
// types.
type TierRoomTypePointsResponseBody struct {
	// points for Sunday - Thursday
	Weekday *int `form:"weekday,omitempty" json:"weekday,omitempty" xml:"weekday,omitempty"`
	// points for Friday - Saturday
	Weekend *int `form:"weekend,omitempty" json:"weekend,omitempty" xml:"weekend,omitempty"`
}

// NewPutResortRequestBody builds the HTTP request body from the payload of the
// "PutResort" endpoint of the "Points" service.
func NewPutResortRequestBody(p *points.PutResortPayload) *PutResortRequestBody {
	body := &PutResortRequestBody{
		Name: p.Name,
	}
	return body
}

// NewGetResortsResortResultCollectionOK builds a "Points" service "GetResorts"
// endpoint result from a HTTP "OK" response.
func NewGetResortsResortResultCollectionOK(body GetResortsResponseBody) pointsviews.ResortResultCollectionView {
	v := make([]*pointsviews.ResortResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalResortResultResponseToPointsviewsResortResultView(val)
	}

	return v
}

// NewGetResortResortResultOK builds a "Points" service "GetResort" endpoint
// result from a HTTP "OK" response.
func NewGetResortResortResultOK(body *GetResortResponseBody) *pointsviews.ResortResultView {
	v := &pointsviews.ResortResultView{
		Code: body.Code,
		Name: body.Name,
	}
	if body.RoomTypes != nil {
		v.RoomTypes = make([]*pointsviews.RoomTypeView, len(body.RoomTypes))
		for i, val := range body.RoomTypes {
			v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToPointsviewsRoomTypeView(val)
		}
	}

	return v
}

// NewGetResortNotFound builds a Points service GetResort endpoint not_found
// error.
func NewGetResortNotFound(body *GetResortNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewPutResortResortResultOK builds a "Points" service "PutResort" endpoint
// result from a HTTP "OK" response.
func NewPutResortResortResultOK(body *PutResortResponseBody) *pointsviews.ResortResultView {
	v := &pointsviews.ResortResultView{
		Code: body.Code,
		Name: body.Name,
	}
	if body.RoomTypes != nil {
		v.RoomTypes = make([]*pointsviews.RoomTypeView, len(body.RoomTypes))
		for i, val := range body.RoomTypes {
			v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToPointsviewsRoomTypeView(val)
		}
	}

	return v
}

// NewPutResortNotFound builds a Points service PutResort endpoint not_found
// error.
func NewPutResortNotFound(body *PutResortNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetResortYearResortYearResultOK builds a "Points" service "GetResortYear"
// endpoint result from a HTTP "OK" response.
func NewGetResortYearResortYearResultOK(body *GetResortYearResponseBody) *pointsviews.ResortYearResultView {
	v := &pointsviews.ResortYearResultView{
		Year: body.Year,
		Code: body.Code,
		Name: body.Name,
	}
	if body.RoomTypes != nil {
		v.RoomTypes = make([]*pointsviews.RoomTypeView, len(body.RoomTypes))
		for i, val := range body.RoomTypes {
			v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToPointsviewsRoomTypeView(val)
		}
	}

	return v
}

// NewGetResortYearNotFound builds a Points service GetResortYear endpoint
// not_found error.
func NewGetResortYearNotFound(body *GetResortYearNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetPointChartPointChartOK builds a "Points" service "GetPointChart"
// endpoint result from a HTTP "OK" response.
func NewGetPointChartPointChartOK(body *GetPointChartResponseBody) *points.PointChart {
	v := &points.PointChart{
		Code:   *body.Code,
		Resort: *body.Resort,
	}
	v.RoomTypes = make([]*points.RoomType, len(body.RoomTypes))
	for i, val := range body.RoomTypes {
		v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToPointsRoomType(val)
	}
	v.Tiers = make([]*points.Tier, len(body.Tiers))
	for i, val := range body.Tiers {
		v.Tiers[i] = unmarshalTierResponseBodyToPointsTier(val)
	}

	return v
}

// NewGetPointChartNotFound builds a Points service GetPointChart endpoint
// not_found error.
func NewGetPointChartNotFound(body *GetPointChartNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewQueryStayStayResultOK builds a "Points" service "QueryStay" endpoint
// result from a HTTP "OK" response.
func NewQueryStayStayResultOK(body *QueryStayResponseBody) *points.StayResult {
	v := &points.StayResult{
		From: *body.From,
		To:   *body.To,
	}
	if body.MinSleeps != nil {
		v.MinSleeps = *body.MinSleeps
	}
	if body.MaxSleeps != nil {
		v.MaxSleeps = *body.MaxSleeps
	}
	if body.MinBedrooms != nil {
		v.MinBedrooms = *body.MinBedrooms
	}
	if body.MaxBedrooms != nil {
		v.MaxBedrooms = *body.MaxBedrooms
	}
	if body.MinBeds != nil {
		v.MinBeds = *body.MinBeds
	}
	if body.MaxBeds != nil {
		v.MaxBeds = *body.MaxBeds
	}
	v.Rooms = make(map[string]map[string]int, len(body.Rooms))
	for key, val := range body.Rooms {
		tk := key
		tvb := make(map[string]int, len(val))
		for key, val := range val {
			tk := key
			tv := val
			tvb[tk] = tv
		}
		v.Rooms[tk] = tvb
	}
	if body.IncludeResorts != nil {
		v.IncludeResorts = make([]string, len(body.IncludeResorts))
		for i, val := range body.IncludeResorts {
			v.IncludeResorts[i] = val
		}
	}
	if body.ExcludeResorts != nil {
		v.ExcludeResorts = make([]string, len(body.ExcludeResorts))
		for i, val := range body.ExcludeResorts {
			v.ExcludeResorts[i] = val
		}
	}
	if body.MinSleeps == nil {
		v.MinSleeps = 1
	}
	if body.MaxSleeps == nil {
		v.MaxSleeps = 12
	}
	if body.MinBedrooms == nil {
		v.MinBedrooms = 0
	}
	if body.MaxBedrooms == nil {
		v.MaxBedrooms = 3
	}
	if body.MinBeds == nil {
		v.MinBeds = 2
	}
	if body.MaxBeds == nil {
		v.MaxBeds = 6
	}

	return v
}

// NewQueryStayInvalidInput builds a Points service QueryStay endpoint
// invalid_input error.
func NewQueryStayInvalidInput(body *QueryStayInvalidInputResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetPointChartResponseBody runs the validations defined on
// GetPointChartResponseBody
func ValidateGetPointChartResponseBody(body *GetPointChartResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Resort == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resort", "body"))
	}
	if body.RoomTypes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roomTypes", "body"))
	}
	if body.Tiers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tiers", "body"))
	}
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z]{3}"))
	}
	for _, e := range body.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Tiers {
		if e != nil {
			if err2 := ValidateTierResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateQueryStayResponseBody runs the validations defined on
// QueryStayResponseBody
func ValidateQueryStayResponseBody(body *QueryStayResponseBody) (err error) {
	if body.Rooms == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Rooms", "body"))
	}
	if body.From == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("from", "body"))
	}
	if body.To == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("to", "body"))
	}
	if body.From != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.from", *body.From, goa.FormatDate))
	}
	if body.To != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.to", *body.To, goa.FormatDate))
	}
	for _, e := range body.IncludeResorts {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.includeResorts[*]", e, "[a-z]{3}"))
	}
	for _, e := range body.ExcludeResorts {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.excludeResorts[*]", e, "[a-z]{3}"))
	}
	if body.MinSleeps != nil {
		if *body.MinSleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minSleeps", *body.MinSleeps, 1, true))
		}
	}
	if body.MinSleeps != nil {
		if *body.MinSleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minSleeps", *body.MinSleeps, 12, false))
		}
	}
	if body.MaxSleeps != nil {
		if *body.MaxSleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maxSleeps", *body.MaxSleeps, 1, true))
		}
	}
	if body.MaxSleeps != nil {
		if *body.MaxSleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maxSleeps", *body.MaxSleeps, 12, false))
		}
	}
	if body.MinBedrooms != nil {
		if *body.MinBedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minBedrooms", *body.MinBedrooms, 0, true))
		}
	}
	if body.MinBedrooms != nil {
		if *body.MinBedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minBedrooms", *body.MinBedrooms, 3, false))
		}
	}
	if body.MaxBedrooms != nil {
		if *body.MaxBedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maxBedrooms", *body.MaxBedrooms, 0, true))
		}
	}
	if body.MaxBedrooms != nil {
		if *body.MaxBedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maxBedrooms", *body.MaxBedrooms, 3, false))
		}
	}
	if body.MinBeds != nil {
		if *body.MinBeds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minBeds", *body.MinBeds, 2, true))
		}
	}
	if body.MinBeds != nil {
		if *body.MinBeds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.minBeds", *body.MinBeds, 6, false))
		}
	}
	if body.MaxBeds != nil {
		if *body.MaxBeds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maxBeds", *body.MaxBeds, 2, true))
		}
	}
	if body.MaxBeds != nil {
		if *body.MaxBeds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.maxBeds", *body.MaxBeds, 6, false))
		}
	}
	return
}

// ValidateGetResortNotFoundResponseBody runs the validations defined on
// GetResort_not_found_Response_Body
func ValidateGetResortNotFoundResponseBody(body *GetResortNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidatePutResortNotFoundResponseBody runs the validations defined on
// PutResort_not_found_Response_Body
func ValidatePutResortNotFoundResponseBody(body *PutResortNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetResortYearNotFoundResponseBody runs the validations defined on
// GetResortYear_not_found_Response_Body
func ValidateGetResortYearNotFoundResponseBody(body *GetResortYearNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetPointChartNotFoundResponseBody runs the validations defined on
// GetPointChart_not_found_Response_Body
func ValidateGetPointChartNotFoundResponseBody(body *GetPointChartNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateQueryStayInvalidInputResponseBody runs the validations defined on
// QueryStay_invalid_input_Response_Body
func ValidateQueryStayInvalidInputResponseBody(body *QueryStayInvalidInputResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResortResultResponse runs the validations defined on
// ResortResultResponse
func ValidateResortResultResponse(body *ResortResultResponse) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z]{3}"))
	}
	for _, e := range body.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRoomTypeResponse runs the validations defined on RoomTypeResponse
func ValidateRoomTypeResponse(body *RoomTypeResponse) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Sleeps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sleeps", "body"))
	}
	if body.Bedrooms == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bedrooms", "body"))
	}
	if body.Beds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("beds", "body"))
	}
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z0-9]{3}"))
	}
	if body.Sleeps != nil {
		if *body.Sleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 1, true))
		}
	}
	if body.Sleeps != nil {
		if *body.Sleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 12, false))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 0, true))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 3, false))
		}
	}
	if body.Beds != nil {
		if *body.Beds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 2, true))
		}
	}
	if body.Beds != nil {
		if *body.Beds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 6, false))
		}
	}
	return
}

// ValidateRoomTypeResponseBody runs the validations defined on
// RoomTypeResponseBody
func ValidateRoomTypeResponseBody(body *RoomTypeResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Sleeps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sleeps", "body"))
	}
	if body.Bedrooms == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bedrooms", "body"))
	}
	if body.Beds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("beds", "body"))
	}
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z0-9]{3}"))
	}
	if body.Sleeps != nil {
		if *body.Sleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 1, true))
		}
	}
	if body.Sleeps != nil {
		if *body.Sleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 12, false))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 0, true))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 3, false))
		}
	}
	if body.Beds != nil {
		if *body.Beds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 2, true))
		}
	}
	if body.Beds != nil {
		if *body.Beds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 6, false))
		}
	}
	return
}

// ValidateTierResponseBody runs the validations defined on TierResponseBody
func ValidateTierResponseBody(body *TierResponseBody) (err error) {
	if body.DateRanges == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("dateRanges", "body"))
	}
	if body.RoomTypePoints == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roomTypePoints", "body"))
	}
	for _, e := range body.DateRanges {
		if e != nil {
			if err2 := ValidateTierDateRangeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for k, v := range body.RoomTypePoints {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.roomTypePoints.key", k, "[a-z0-9]{3}"))
		if v != nil {
			if err2 := ValidateTierRoomTypePointsResponseBody(v); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTierDateRangeResponseBody runs the validations defined on
// TierDateRangeResponseBody
func ValidateTierDateRangeResponseBody(body *TierDateRangeResponseBody) (err error) {
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.startDate", *body.StartDate, "(0?1|0?2|0?3|0?4|0?5|0?6|0?7|0?8|0?9|10|11|12)-(0?1|0?2|0?3|0?4|0?5|0?6|0?7|0?8|0?9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)"))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.endDate", *body.EndDate, "(0?1|0?2|0?3|0?4|0?5|0?6|0?7|0?8|0?9|10|11|12)-(0?1|0?2|0?3|0?4|0?5|0?6|0?7|0?8|0?9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)"))
	}
	return
}

// ValidateTierRoomTypePointsResponseBody runs the validations defined on
// TierRoomTypePointsResponseBody
func ValidateTierRoomTypePointsResponseBody(body *TierRoomTypePointsResponseBody) (err error) {
	if body.Weekday == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("weekday", "body"))
	}
	if body.Weekend == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("weekend", "body"))
	}
	return
}
