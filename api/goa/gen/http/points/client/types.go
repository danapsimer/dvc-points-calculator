// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points HTTP client types
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package client

import (
	points "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points"
	pointsviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points/views"
	goa "goa.design/goa/v3/pkg"
)

// GetResortsResponseBody is the type of the "Points" service "GetResorts"
// endpoint HTTP response body.
type GetResortsResponseBody []*ResortResultResponse

// GetResortResponseBody is the type of the "Points" service "GetResort"
// endpoint HTTP response body.
type GetResortResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string                 `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetResortYearResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body.
type GetResortYearResponseBody struct {
	// the year the resort info is for.
	Year *int `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string                 `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetPointChartResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body.
type GetPointChartResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's code
	Resort    *string                 `form:"resort,omitempty" json:"resort,omitempty" xml:"resort,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
	Tiers     []*TierResponseBody     `form:"tiers,omitempty" json:"tiers,omitempty" xml:"tiers,omitempty"`
}

// GetResortNotFoundResponseBody is the type of the "Points" service
// "GetResort" endpoint HTTP response body for the "not_found" error.
type GetResortNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetResortYearNotFoundResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body for the "not_found" error.
type GetResortYearNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetPointChartNotFoundResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body for the "not_found" error.
type GetPointChartNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResortResultResponse is used to define fields on response body types.
type ResortResultResponse struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string             `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponse `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// RoomTypeResponse is used to define fields on response body types.
type RoomTypeResponse struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// RoomTypeResponseBody is used to define fields on response body types.
type RoomTypeResponseBody struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// TierResponseBody is used to define fields on response body types.
type TierResponseBody struct {
	DateRanges     []*TierDateRangeResponseBody               `form:"dateRanges,omitempty" json:"dateRanges,omitempty" xml:"dateRanges,omitempty"`
	RoomTypePoints map[string]*TierRoomTypePointsResponseBody `form:"roomTypePoints,omitempty" json:"roomTypePoints,omitempty" xml:"roomTypePoints,omitempty"`
}

// TierDateRangeResponseBody is used to define fields on response body types.
type TierDateRangeResponseBody struct {
	// start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// end date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
}

// TierRoomTypePointsResponseBody is used to define fields on response body
// types.
type TierRoomTypePointsResponseBody struct {
	// points for Sunday - Thursday
	Weekday *int `form:"weekday,omitempty" json:"weekday,omitempty" xml:"weekday,omitempty"`
	// points for Friday - Saturday
	Weekend *int `form:"weekend,omitempty" json:"weekend,omitempty" xml:"weekend,omitempty"`
}

// NewGetResortsResortResultCollectionOK builds a "Points" service "GetResorts"
// endpoint result from a HTTP "OK" response.
func NewGetResortsResortResultCollectionOK(body GetResortsResponseBody) pointsviews.ResortResultCollectionView {
	v := make([]*pointsviews.ResortResultView, len(body))
	for i, val := range body {
		v[i] = unmarshalResortResultResponseToPointsviewsResortResultView(val)
	}

	return v
}

// NewGetResortResortResultOK builds a "Points" service "GetResort" endpoint
// result from a HTTP "OK" response.
func NewGetResortResortResultOK(body *GetResortResponseBody) *pointsviews.ResortResultView {
	v := &pointsviews.ResortResultView{
		Code: body.Code,
		Name: body.Name,
	}
	if body.RoomTypes != nil {
		v.RoomTypes = make([]*pointsviews.RoomTypeView, len(body.RoomTypes))
		for i, val := range body.RoomTypes {
			v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToPointsviewsRoomTypeView(val)
		}
	}

	return v
}

// NewGetResortNotFound builds a Points service GetResort endpoint not_found
// error.
func NewGetResortNotFound(body *GetResortNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetResortYearResortYearResultOK builds a "Points" service "GetResortYear"
// endpoint result from a HTTP "OK" response.
func NewGetResortYearResortYearResultOK(body *GetResortYearResponseBody) *pointsviews.ResortYearResultView {
	v := &pointsviews.ResortYearResultView{
		Year: body.Year,
		Code: body.Code,
		Name: body.Name,
	}
	if body.RoomTypes != nil {
		v.RoomTypes = make([]*pointsviews.RoomTypeView, len(body.RoomTypes))
		for i, val := range body.RoomTypes {
			v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToPointsviewsRoomTypeView(val)
		}
	}

	return v
}

// NewGetResortYearNotFound builds a Points service GetResortYear endpoint
// not_found error.
func NewGetResortYearNotFound(body *GetResortYearNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetPointChartPointChartOK builds a "Points" service "GetPointChart"
// endpoint result from a HTTP "OK" response.
func NewGetPointChartPointChartOK(body *GetPointChartResponseBody) *points.PointChart {
	v := &points.PointChart{
		Code:   body.Code,
		Resort: body.Resort,
	}
	if body.RoomTypes != nil {
		v.RoomTypes = make([]*points.RoomType, len(body.RoomTypes))
		for i, val := range body.RoomTypes {
			v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToPointsRoomType(val)
		}
	}
	if body.Tiers != nil {
		v.Tiers = make([]*points.Tier, len(body.Tiers))
		for i, val := range body.Tiers {
			v.Tiers[i] = unmarshalTierResponseBodyToPointsTier(val)
		}
	}

	return v
}

// NewGetPointChartNotFound builds a Points service GetPointChart endpoint
// not_found error.
func NewGetPointChartNotFound(body *GetPointChartNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetPointChartResponseBody runs the validations defined on
// GetPointChartResponseBody
func ValidateGetPointChartResponseBody(body *GetPointChartResponseBody) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z]{3}"))
	}
	for _, e := range body.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Tiers {
		if e != nil {
			if err2 := ValidateTierResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetResortNotFoundResponseBody runs the validations defined on
// GetResort_not_found_Response_Body
func ValidateGetResortNotFoundResponseBody(body *GetResortNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetResortYearNotFoundResponseBody runs the validations defined on
// GetResortYear_not_found_Response_Body
func ValidateGetResortYearNotFoundResponseBody(body *GetResortYearNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetPointChartNotFoundResponseBody runs the validations defined on
// GetPointChart_not_found_Response_Body
func ValidateGetPointChartNotFoundResponseBody(body *GetPointChartNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResortResultResponse runs the validations defined on
// ResortResultResponse
func ValidateResortResultResponse(body *ResortResultResponse) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z]{3}"))
	}
	for _, e := range body.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRoomTypeResponse runs the validations defined on RoomTypeResponse
func ValidateRoomTypeResponse(body *RoomTypeResponse) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z0-9]{3}"))
	}
	if body.Sleeps != nil {
		if *body.Sleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 1, true))
		}
	}
	if body.Sleeps != nil {
		if *body.Sleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 12, false))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 0, true))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 3, false))
		}
	}
	if body.Beds != nil {
		if *body.Beds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 2, true))
		}
	}
	if body.Beds != nil {
		if *body.Beds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 6, false))
		}
	}
	return
}

// ValidateRoomTypeResponseBody runs the validations defined on
// RoomTypeResponseBody
func ValidateRoomTypeResponseBody(body *RoomTypeResponseBody) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z0-9]{3}"))
	}
	if body.Sleeps != nil {
		if *body.Sleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 1, true))
		}
	}
	if body.Sleeps != nil {
		if *body.Sleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.sleeps", *body.Sleeps, 12, false))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 0, true))
		}
	}
	if body.Bedrooms != nil {
		if *body.Bedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.bedrooms", *body.Bedrooms, 3, false))
		}
	}
	if body.Beds != nil {
		if *body.Beds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 2, true))
		}
	}
	if body.Beds != nil {
		if *body.Beds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.beds", *body.Beds, 6, false))
		}
	}
	return
}

// ValidateTierResponseBody runs the validations defined on TierResponseBody
func ValidateTierResponseBody(body *TierResponseBody) (err error) {
	for _, e := range body.DateRanges {
		if e != nil {
			if err2 := ValidateTierDateRangeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTierDateRangeResponseBody runs the validations defined on
// TierDateRangeResponseBody
func ValidateTierDateRangeResponseBody(body *TierDateRangeResponseBody) (err error) {
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.startDate", *body.StartDate, "\\d{1,2}-\\d{1,2}"))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.endDate", *body.EndDate, "\\d{1,2}-\\d{1,2}"))
	}
	return
}
