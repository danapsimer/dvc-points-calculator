// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"

	points "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points"
	pointsviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetResortsResponse returns an encoder for responses returned by the
// Points GetResorts endpoint.
func EncodeGetResortsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(pointsviews.ResortResultCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewResortResultResponseCollection(res.Projected)
		case "resortOnly":
			body = NewResortResultResponseResortOnlyCollection(res.Projected)
		case "resortUpdate":
			body = NewResortResultResponseResortUpdateCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetResortResponse returns an encoder for responses returned by the
// Points GetResort endpoint.
func EncodeGetResortResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*pointsviews.ResortResult)
		enc := encoder(ctx, w)
		body := NewGetResortResponseBodyResortOnly(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetResortRequest returns a decoder for requests sent to the Points
// GetResort endpoint.
func DecodeGetResortRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			resortCode string
			err        error

			params = mux.Vars(r)
		)
		resortCode = params["resortCode"]
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		if err != nil {
			return nil, err
		}
		payload := NewGetResortPayload(resortCode)

		return payload, nil
	}
}

// EncodeGetResortError returns an encoder for errors returned by the GetResort
// Points endpoint.
func EncodeGetResortError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetResortNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePutResortResponse returns an encoder for responses returned by the
// Points PutResort endpoint.
func EncodePutResortResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*pointsviews.ResortResult)
		enc := encoder(ctx, w)
		body := NewPutResortResponseBodyResortOnly(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePutResortRequest returns a decoder for requests sent to the Points
// PutResort endpoint.
func DecodePutResortRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PutResortRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePutResortRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			resortCode string

			params = mux.Vars(r)
		)
		resortCode = params["resortCode"]
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		if err != nil {
			return nil, err
		}
		payload := NewPutResortPayload(&body, resortCode)

		return payload, nil
	}
}

// EncodePutResortError returns an encoder for errors returned by the PutResort
// Points endpoint.
func EncodePutResortError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPutResortNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetResortYearResponse returns an encoder for responses returned by the
// Points GetResortYear endpoint.
func EncodeGetResortYearResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*pointsviews.ResortYearResult)
		enc := encoder(ctx, w)
		body := NewGetResortYearResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetResortYearRequest returns a decoder for requests sent to the Points
// GetResortYear endpoint.
func DecodeGetResortYearRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			resortCode string
			year       int
			err        error

			params = mux.Vars(r)
		)
		resortCode = params["resortCode"]
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		{
			yearRaw := params["year"]
			v, err2 := strconv.ParseInt(yearRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("year", yearRaw, "integer"))
			}
			year = int(v)
		}
		if year < 1990 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 1990, true))
		}
		if year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 2100, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetResortYearPayload(resortCode, year)

		return payload, nil
	}
}

// EncodeGetResortYearError returns an encoder for errors returned by the
// GetResortYear Points endpoint.
func EncodeGetResortYearError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetResortYearNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetPointChartResponse returns an encoder for responses returned by the
// Points GetPointChart endpoint.
func EncodeGetPointChartResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*points.PointChart)
		enc := encoder(ctx, w)
		body := NewGetPointChartResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetPointChartRequest returns a decoder for requests sent to the Points
// GetPointChart endpoint.
func DecodeGetPointChartRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			resortCode string
			year       int
			err        error

			params = mux.Vars(r)
		)
		resortCode = params["resortCode"]
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		{
			yearRaw := params["year"]
			v, err2 := strconv.ParseInt(yearRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("year", yearRaw, "integer"))
			}
			year = int(v)
		}
		if year < 1990 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 1990, true))
		}
		if year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("year", year, 2100, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetPointChartPayload(resortCode, year)

		return payload, nil
	}
}

// EncodeGetPointChartError returns an encoder for errors returned by the
// GetPointChart Points endpoint.
func EncodeGetPointChartError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetPointChartNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeQueryStayResponse returns an encoder for responses returned by the
// Points QueryStay endpoint.
func EncodeQueryStayResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*points.StayResult)
		enc := encoder(ctx, w)
		body := NewQueryStayResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeQueryStayRequest returns a decoder for requests sent to the Points
// QueryStay endpoint.
func DecodeQueryStayRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			from           string
			to             string
			includeResorts []string
			excludeResorts []string
			minSleeps      int
			maxSleeps      int
			minBedrooms    int
			maxBedrooms    int
			minBeds        int
			maxBeds        int
			err            error

			params = mux.Vars(r)
		)
		from = params["from"]
		err = goa.MergeErrors(err, goa.ValidateFormat("from", from, goa.FormatDate))

		to = params["to"]
		err = goa.MergeErrors(err, goa.ValidateFormat("to", to, goa.FormatDate))

		includeResorts = r.URL.Query()["includeResorts"]
		for _, e := range includeResorts {
			err = goa.MergeErrors(err, goa.ValidatePattern("includeResorts[*]", e, "[a-z]{3}"))
		}
		excludeResorts = r.URL.Query()["excludeResorts"]
		for _, e := range excludeResorts {
			err = goa.MergeErrors(err, goa.ValidatePattern("excludeResorts[*]", e, "[a-z]{3}"))
		}
		{
			minSleepsRaw := r.URL.Query().Get("minSleeps")
			if minSleepsRaw == "" {
				minSleeps = 1
			} else {
				v, err2 := strconv.ParseInt(minSleepsRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("minSleeps", minSleepsRaw, "integer"))
				}
				minSleeps = int(v)
			}
		}
		if minSleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("minSleeps", minSleeps, 1, true))
		}
		if minSleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("minSleeps", minSleeps, 12, false))
		}
		{
			maxSleepsRaw := r.URL.Query().Get("maxSleeps")
			if maxSleepsRaw == "" {
				maxSleeps = 12
			} else {
				v, err2 := strconv.ParseInt(maxSleepsRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("maxSleeps", maxSleepsRaw, "integer"))
				}
				maxSleeps = int(v)
			}
		}
		if maxSleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("maxSleeps", maxSleeps, 1, true))
		}
		if maxSleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("maxSleeps", maxSleeps, 12, false))
		}
		{
			minBedroomsRaw := r.URL.Query().Get("minBedrooms")
			if minBedroomsRaw != "" {
				v, err2 := strconv.ParseInt(minBedroomsRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("minBedrooms", minBedroomsRaw, "integer"))
				}
				minBedrooms = int(v)
			}
		}
		if minBedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("minBedrooms", minBedrooms, 0, true))
		}
		if minBedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("minBedrooms", minBedrooms, 3, false))
		}
		{
			maxBedroomsRaw := r.URL.Query().Get("maxBedrooms")
			if maxBedroomsRaw == "" {
				maxBedrooms = 3
			} else {
				v, err2 := strconv.ParseInt(maxBedroomsRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("maxBedrooms", maxBedroomsRaw, "integer"))
				}
				maxBedrooms = int(v)
			}
		}
		if maxBedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("maxBedrooms", maxBedrooms, 0, true))
		}
		if maxBedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("maxBedrooms", maxBedrooms, 3, false))
		}
		{
			minBedsRaw := r.URL.Query().Get("minBeds")
			if minBedsRaw == "" {
				minBeds = 2
			} else {
				v, err2 := strconv.ParseInt(minBedsRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("minBeds", minBedsRaw, "integer"))
				}
				minBeds = int(v)
			}
		}
		if minBeds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("minBeds", minBeds, 2, true))
		}
		if minBeds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("minBeds", minBeds, 6, false))
		}
		{
			maxBedsRaw := r.URL.Query().Get("maxBeds")
			if maxBedsRaw == "" {
				maxBeds = 6
			} else {
				v, err2 := strconv.ParseInt(maxBedsRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("maxBeds", maxBedsRaw, "integer"))
				}
				maxBeds = int(v)
			}
		}
		if maxBeds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("maxBeds", maxBeds, 2, true))
		}
		if maxBeds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("maxBeds", maxBeds, 6, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewQueryStayStay(from, to, includeResorts, excludeResorts, minSleeps, maxSleeps, minBedrooms, maxBedrooms, minBeds, maxBeds)

		return payload, nil
	}
}

// EncodeQueryStayError returns an encoder for errors returned by the QueryStay
// Points endpoint.
func EncodeQueryStayError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_input":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewQueryStayInvalidInputResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalPointsviewsResortResultViewToResortResultResponse builds a value of
// type *ResortResultResponse from a value of type
// *pointsviews.ResortResultView.
func marshalPointsviewsResortResultViewToResortResultResponse(v *pointsviews.ResortResultView) *ResortResultResponse {
	res := &ResortResultResponse{
		Code: v.Code,
		Name: v.Name,
	}
	if v.RoomTypes != nil {
		res.RoomTypes = make([]*RoomTypeResponse, len(v.RoomTypes))
		for i, val := range v.RoomTypes {
			res.RoomTypes[i] = marshalPointsviewsRoomTypeViewToRoomTypeResponse(val)
		}
	}

	return res
}

// marshalPointsviewsRoomTypeViewToRoomTypeResponse builds a value of type
// *RoomTypeResponse from a value of type *pointsviews.RoomTypeView.
func marshalPointsviewsRoomTypeViewToRoomTypeResponse(v *pointsviews.RoomTypeView) *RoomTypeResponse {
	if v == nil {
		return nil
	}
	res := &RoomTypeResponse{
		Code:     *v.Code,
		Name:     *v.Name,
		Sleeps:   *v.Sleeps,
		Bedrooms: *v.Bedrooms,
		Beds:     *v.Beds,
	}

	return res
}

// marshalPointsviewsResortResultViewToResortResultResponseResortOnly builds a
// value of type *ResortResultResponseResortOnly from a value of type
// *pointsviews.ResortResultView.
func marshalPointsviewsResortResultViewToResortResultResponseResortOnly(v *pointsviews.ResortResultView) *ResortResultResponseResortOnly {
	res := &ResortResultResponseResortOnly{
		Code: v.Code,
		Name: v.Name,
	}

	return res
}

// marshalPointsviewsResortResultViewToResortResultResponseResortUpdate builds
// a value of type *ResortResultResponseResortUpdate from a value of type
// *pointsviews.ResortResultView.
func marshalPointsviewsResortResultViewToResortResultResponseResortUpdate(v *pointsviews.ResortResultView) *ResortResultResponseResortUpdate {
	res := &ResortResultResponseResortUpdate{
		Name: v.Name,
	}

	return res
}

// marshalPointsviewsRoomTypeViewToRoomTypeResponseBody builds a value of type
// *RoomTypeResponseBody from a value of type *pointsviews.RoomTypeView.
func marshalPointsviewsRoomTypeViewToRoomTypeResponseBody(v *pointsviews.RoomTypeView) *RoomTypeResponseBody {
	if v == nil {
		return nil
	}
	res := &RoomTypeResponseBody{
		Code:     *v.Code,
		Name:     *v.Name,
		Sleeps:   *v.Sleeps,
		Bedrooms: *v.Bedrooms,
		Beds:     *v.Beds,
	}

	return res
}

// marshalPointsRoomTypeToRoomTypeResponseBody builds a value of type
// *RoomTypeResponseBody from a value of type *points.RoomType.
func marshalPointsRoomTypeToRoomTypeResponseBody(v *points.RoomType) *RoomTypeResponseBody {
	res := &RoomTypeResponseBody{
		Code:     v.Code,
		Name:     v.Name,
		Sleeps:   v.Sleeps,
		Bedrooms: v.Bedrooms,
		Beds:     v.Beds,
	}

	return res
}

// marshalPointsTierToTierResponseBody builds a value of type *TierResponseBody
// from a value of type *points.Tier.
func marshalPointsTierToTierResponseBody(v *points.Tier) *TierResponseBody {
	res := &TierResponseBody{}
	if v.DateRanges != nil {
		res.DateRanges = make([]*TierDateRangeResponseBody, len(v.DateRanges))
		for i, val := range v.DateRanges {
			res.DateRanges[i] = marshalPointsTierDateRangeToTierDateRangeResponseBody(val)
		}
	}
	if v.RoomTypePoints != nil {
		res.RoomTypePoints = make(map[string]*TierRoomTypePointsResponseBody, len(v.RoomTypePoints))
		for key, val := range v.RoomTypePoints {
			tk := key
			res.RoomTypePoints[tk] = marshalPointsTierRoomTypePointsToTierRoomTypePointsResponseBody(val)
		}
	}

	return res
}

// marshalPointsTierDateRangeToTierDateRangeResponseBody builds a value of type
// *TierDateRangeResponseBody from a value of type *points.TierDateRange.
func marshalPointsTierDateRangeToTierDateRangeResponseBody(v *points.TierDateRange) *TierDateRangeResponseBody {
	res := &TierDateRangeResponseBody{
		StartDate: v.StartDate,
		EndDate:   v.EndDate,
	}

	return res
}

// marshalPointsTierRoomTypePointsToTierRoomTypePointsResponseBody builds a
// value of type *TierRoomTypePointsResponseBody from a value of type
// *points.TierRoomTypePoints.
func marshalPointsTierRoomTypePointsToTierRoomTypePointsResponseBody(v *points.TierRoomTypePoints) *TierRoomTypePointsResponseBody {
	res := &TierRoomTypePointsResponseBody{
		Weekday: v.Weekday,
		Weekend: v.Weekend,
	}

	return res
}
