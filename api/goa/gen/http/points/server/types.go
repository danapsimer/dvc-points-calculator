// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points HTTP server types
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package server

import (
	points "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points"
	pointsviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points/views"
	"github.com/danapsimer/dvc-points-calculator/model"
	goa "goa.design/goa/v3/pkg"
)

// PutResortRequestBody is the type of the "Points" service "PutResort"
// endpoint HTTP request body.
type PutResortRequestBody struct {
	// The resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ResortResultResponseCollection is the type of the "Points" service
// "GetResorts" endpoint HTTP response body.
type ResortResultResponseCollection []*ResortResultResponse

// ResortResultResponseResortOnlyCollection is the type of the "Points" service
// "GetResorts" endpoint HTTP response body.
type ResortResultResponseResortOnlyCollection []*ResortResultResponseResortOnly

// ResortResultResponseResortUpdateCollection is the type of the "Points"
// service "GetResorts" endpoint HTTP response body.
type ResortResultResponseResortUpdateCollection []*ResortResultResponseResortUpdate

// GetResortResponseBodyResortOnly is the type of the "Points" service
// "GetResort" endpoint HTTP response body.
type GetResortResponseBodyResortOnly struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// PutResortResponseBodyResortOnly is the type of the "Points" service
// "PutResort" endpoint HTTP response body.
type PutResortResponseBodyResortOnly struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetResortYearResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body.
type GetResortYearResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// the year the resort info is for.
	Year      *int                    `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetPointChartResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body.
type GetPointChartResponseBody struct {
	// resort's code
	Code string `form:"code" json:"code" xml:"code"`
	// resort's code
	Resort    string                  `form:"resort" json:"resort" xml:"resort"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes" json:"roomTypes" xml:"roomTypes"`
	Tiers     []*TierResponseBody     `form:"tiers" json:"tiers" xml:"tiers"`
}

// QueryStayResponseBody is the type of the "Points" service "QueryStay"
// endpoint HTTP response body.
type QueryStayResponseBody struct {
	Rooms map[string]map[string]int `form:"Rooms" json:"Rooms" xml:"Rooms"`
	// Check-in Date
	From string `form:"from" json:"from" xml:"from"`
	// Check-in Date
	To string `form:"to" json:"to" xml:"to"`
	// resorts to include in the search
	IncludeResorts []string `form:"includeResorts,omitempty" json:"includeResorts,omitempty" xml:"includeResorts,omitempty"`
	// resorts to exclude from the search
	ExcludeResorts []string `form:"excludeResorts,omitempty" json:"excludeResorts,omitempty" xml:"excludeResorts,omitempty"`
	// the minimum capacity of room types to include
	MinSleeps int `form:"minSleeps" json:"minSleeps" xml:"minSleeps"`
	// the maximum capacity of room types to include
	MaxSleeps int `form:"maxSleeps" json:"maxSleeps" xml:"maxSleeps"`
	// the minimum number of bedrooms of room types to include
	MinBedrooms int `form:"minBedrooms" json:"minBedrooms" xml:"minBedrooms"`
	// the maximum number of bedrooms of room types to include
	MaxBedrooms int `form:"maxBedrooms" json:"maxBedrooms" xml:"maxBedrooms"`
	// the minimum number of beds of room types to include
	MinBeds int `form:"minBeds" json:"minBeds" xml:"minBeds"`
	// the maximum number of beds of room types to include
	MaxBeds int `form:"maxBeds" json:"maxBeds" xml:"maxBeds"`
}

// GetResortNotFoundResponseBody is the type of the "Points" service
// "GetResort" endpoint HTTP response body for the "not_found" error.
type GetResortNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PutResortNotFoundResponseBody is the type of the "Points" service
// "PutResort" endpoint HTTP response body for the "not_found" error.
type PutResortNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetResortYearNotFoundResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body for the "not_found" error.
type GetResortYearNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPointChartNotFoundResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body for the "not_found" error.
type GetPointChartNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// QueryStayInvalidInputResponseBody is the type of the "Points" service
// "QueryStay" endpoint HTTP response body for the "invalid_input" error.
type QueryStayInvalidInputResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResortResultResponse is used to define fields on response body types.
type ResortResultResponse struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string             `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponse `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// RoomTypeResponse is used to define fields on response body types.
type RoomTypeResponse struct {
	// room type's code
	Code string `form:"code" json:"code" xml:"code"`
	// room type's name
	Name string `form:"name" json:"name" xml:"name"`
	// max room capacity
	Sleeps int `form:"sleeps" json:"sleeps" xml:"sleeps"`
	// number of bedrooms
	Bedrooms int `form:"bedrooms" json:"bedrooms" xml:"bedrooms"`
	// number of beds
	Beds int `form:"beds" json:"beds" xml:"beds"`
}

// ResortResultResponseResortOnly is used to define fields on response body
// types.
type ResortResultResponseResortOnly struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ResortResultResponseResortUpdate is used to define fields on response body
// types.
type ResortResultResponseResortUpdate struct {
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RoomTypeResponseBody is used to define fields on response body types.
type RoomTypeResponseBody struct {
	// room type's code
	Code string `form:"code" json:"code" xml:"code"`
	// room type's name
	Name string `form:"name" json:"name" xml:"name"`
	// max room capacity
	Sleeps int `form:"sleeps" json:"sleeps" xml:"sleeps"`
	// number of bedrooms
	Bedrooms int `form:"bedrooms" json:"bedrooms" xml:"bedrooms"`
	// number of beds
	Beds int `form:"beds" json:"beds" xml:"beds"`
}

// TierResponseBody is used to define fields on response body types.
type TierResponseBody struct {
	DateRanges     []*TierDateRangeResponseBody               `form:"dateRanges" json:"dateRanges" xml:"dateRanges"`
	RoomTypePoints map[string]*TierRoomTypePointsResponseBody `form:"roomTypePoints" json:"roomTypePoints" xml:"roomTypePoints"`
}

// TierDateRangeResponseBody is used to define fields on response body types.
type TierDateRangeResponseBody struct {
	// start date
	StartDate model.TierDate `form:"startDate" json:"startDate" xml:"startDate"`
	// end date
	EndDate model.TierDate `form:"endDate" json:"endDate" xml:"endDate"`
}

// TierRoomTypePointsResponseBody is used to define fields on response body
// types.
type TierRoomTypePointsResponseBody struct {
	// points for Sunday - Thursday
	Weekday int `form:"weekday" json:"weekday" xml:"weekday"`
	// points for Friday - Saturday
	Weekend int `form:"weekend" json:"weekend" xml:"weekend"`
}

// NewResortResultResponseCollection builds the HTTP response body from the
// result of the "GetResorts" endpoint of the "Points" service.
func NewResortResultResponseCollection(res pointsviews.ResortResultCollectionView) ResortResultResponseCollection {
	body := make([]*ResortResultResponse, len(res))
	for i, val := range res {
		body[i] = marshalPointsviewsResortResultViewToResortResultResponse(val)
	}
	return body
}

// NewResortResultResponseResortOnlyCollection builds the HTTP response body
// from the result of the "GetResorts" endpoint of the "Points" service.
func NewResortResultResponseResortOnlyCollection(res pointsviews.ResortResultCollectionView) ResortResultResponseResortOnlyCollection {
	body := make([]*ResortResultResponseResortOnly, len(res))
	for i, val := range res {
		body[i] = marshalPointsviewsResortResultViewToResortResultResponseResortOnly(val)
	}
	return body
}

// NewResortResultResponseResortUpdateCollection builds the HTTP response body
// from the result of the "GetResorts" endpoint of the "Points" service.
func NewResortResultResponseResortUpdateCollection(res pointsviews.ResortResultCollectionView) ResortResultResponseResortUpdateCollection {
	body := make([]*ResortResultResponseResortUpdate, len(res))
	for i, val := range res {
		body[i] = marshalPointsviewsResortResultViewToResortResultResponseResortUpdate(val)
	}
	return body
}

// NewGetResortResponseBodyResortOnly builds the HTTP response body from the
// result of the "GetResort" endpoint of the "Points" service.
func NewGetResortResponseBodyResortOnly(res *pointsviews.ResortResultView) *GetResortResponseBodyResortOnly {
	body := &GetResortResponseBodyResortOnly{
		Code: res.Code,
		Name: res.Name,
	}
	return body
}

// NewPutResortResponseBodyResortOnly builds the HTTP response body from the
// result of the "PutResort" endpoint of the "Points" service.
func NewPutResortResponseBodyResortOnly(res *pointsviews.ResortResultView) *PutResortResponseBodyResortOnly {
	body := &PutResortResponseBodyResortOnly{
		Code: res.Code,
		Name: res.Name,
	}
	return body
}

// NewGetResortYearResponseBody builds the HTTP response body from the result
// of the "GetResortYear" endpoint of the "Points" service.
func NewGetResortYearResponseBody(res *pointsviews.ResortYearResultView) *GetResortYearResponseBody {
	body := &GetResortYearResponseBody{
		Year: res.Year,
		Code: res.Code,
		Name: res.Name,
	}
	if res.RoomTypes != nil {
		body.RoomTypes = make([]*RoomTypeResponseBody, len(res.RoomTypes))
		for i, val := range res.RoomTypes {
			body.RoomTypes[i] = marshalPointsviewsRoomTypeViewToRoomTypeResponseBody(val)
		}
	}
	return body
}

// NewGetPointChartResponseBody builds the HTTP response body from the result
// of the "GetPointChart" endpoint of the "Points" service.
func NewGetPointChartResponseBody(res *points.PointChart) *GetPointChartResponseBody {
	body := &GetPointChartResponseBody{
		Code:   res.Code,
		Resort: res.Resort,
	}
	if res.RoomTypes != nil {
		body.RoomTypes = make([]*RoomTypeResponseBody, len(res.RoomTypes))
		for i, val := range res.RoomTypes {
			body.RoomTypes[i] = marshalPointsRoomTypeToRoomTypeResponseBody(val)
		}
	}
	if res.Tiers != nil {
		body.Tiers = make([]*TierResponseBody, len(res.Tiers))
		for i, val := range res.Tiers {
			body.Tiers[i] = marshalPointsTierToTierResponseBody(val)
		}
	}
	return body
}

// NewQueryStayResponseBody builds the HTTP response body from the result of
// the "QueryStay" endpoint of the "Points" service.
func NewQueryStayResponseBody(res *points.StayResult) *QueryStayResponseBody {
	body := &QueryStayResponseBody{
		From:        res.From,
		To:          res.To,
		MinSleeps:   res.MinSleeps,
		MaxSleeps:   res.MaxSleeps,
		MinBedrooms: res.MinBedrooms,
		MaxBedrooms: res.MaxBedrooms,
		MinBeds:     res.MinBeds,
		MaxBeds:     res.MaxBeds,
	}
	if res.Rooms != nil {
		body.Rooms = make(map[string]map[string]int, len(res.Rooms))
		for key, val := range res.Rooms {
			tk := key
			tvb := make(map[string]int, len(val))
			for key, val := range val {
				tk := key
				tv := val
				tvb[tk] = tv
			}
			body.Rooms[tk] = tvb
		}
	}
	if res.IncludeResorts != nil {
		body.IncludeResorts = make([]string, len(res.IncludeResorts))
		for i, val := range res.IncludeResorts {
			body.IncludeResorts[i] = val
		}
	}
	if res.ExcludeResorts != nil {
		body.ExcludeResorts = make([]string, len(res.ExcludeResorts))
		for i, val := range res.ExcludeResorts {
			body.ExcludeResorts[i] = val
		}
	}
	{
		var zero int
		if body.MinSleeps == zero {
			body.MinSleeps = 1
		}
	}
	{
		var zero int
		if body.MaxSleeps == zero {
			body.MaxSleeps = 12
		}
	}
	{
		var zero int
		if body.MinBedrooms == zero {
			body.MinBedrooms = 0
		}
	}
	{
		var zero int
		if body.MaxBedrooms == zero {
			body.MaxBedrooms = 3
		}
	}
	{
		var zero int
		if body.MinBeds == zero {
			body.MinBeds = 2
		}
	}
	{
		var zero int
		if body.MaxBeds == zero {
			body.MaxBeds = 6
		}
	}
	return body
}

// NewGetResortNotFoundResponseBody builds the HTTP response body from the
// result of the "GetResort" endpoint of the "Points" service.
func NewGetResortNotFoundResponseBody(res *goa.ServiceError) *GetResortNotFoundResponseBody {
	body := &GetResortNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewPutResortNotFoundResponseBody builds the HTTP response body from the
// result of the "PutResort" endpoint of the "Points" service.
func NewPutResortNotFoundResponseBody(res *goa.ServiceError) *PutResortNotFoundResponseBody {
	body := &PutResortNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetResortYearNotFoundResponseBody builds the HTTP response body from the
// result of the "GetResortYear" endpoint of the "Points" service.
func NewGetResortYearNotFoundResponseBody(res *goa.ServiceError) *GetResortYearNotFoundResponseBody {
	body := &GetResortYearNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPointChartNotFoundResponseBody builds the HTTP response body from the
// result of the "GetPointChart" endpoint of the "Points" service.
func NewGetPointChartNotFoundResponseBody(res *goa.ServiceError) *GetPointChartNotFoundResponseBody {
	body := &GetPointChartNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewQueryStayInvalidInputResponseBody builds the HTTP response body from the
// result of the "QueryStay" endpoint of the "Points" service.
func NewQueryStayInvalidInputResponseBody(res *goa.ServiceError) *QueryStayInvalidInputResponseBody {
	body := &QueryStayInvalidInputResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetResortPayload builds a Points service GetResort endpoint payload.
func NewGetResortPayload(resortCode string) *points.GetResortPayload {
	v := &points.GetResortPayload{}
	v.ResortCode = resortCode

	return v
}

// NewPutResortPayload builds a Points service PutResort endpoint payload.
func NewPutResortPayload(body *PutResortRequestBody, resortCode string) *points.PutResortPayload {
	v := &points.PutResortPayload{
		Name: *body.Name,
	}
	v.ResortCode = resortCode

	return v
}

// NewGetResortYearPayload builds a Points service GetResortYear endpoint
// payload.
func NewGetResortYearPayload(resortCode string, year int) *points.GetResortYearPayload {
	v := &points.GetResortYearPayload{}
	v.ResortCode = resortCode
	v.Year = year

	return v
}

// NewGetPointChartPayload builds a Points service GetPointChart endpoint
// payload.
func NewGetPointChartPayload(resortCode string, year int) *points.GetPointChartPayload {
	v := &points.GetPointChartPayload{}
	v.ResortCode = resortCode
	v.Year = year

	return v
}

// NewQueryStayStay builds a Points service QueryStay endpoint payload.
func NewQueryStayStay(from string, to string, includeResorts []string, excludeResorts []string, minSleeps int, maxSleeps int, minBedrooms int, maxBedrooms int, minBeds int, maxBeds int) *points.Stay {
	v := &points.Stay{}
	v.From = from
	v.To = to
	v.IncludeResorts = includeResorts
	v.ExcludeResorts = excludeResorts
	v.MinSleeps = minSleeps
	v.MaxSleeps = maxSleeps
	v.MinBedrooms = minBedrooms
	v.MaxBedrooms = maxBedrooms
	v.MinBeds = minBeds
	v.MaxBeds = maxBeds

	return v
}

// ValidatePutResortRequestBody runs the validations defined on
// PutResortRequestBody
func ValidatePutResortRequestBody(body *PutResortRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
