// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points HTTP server types
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package server

import (
	points "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points"
	pointsviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points/views"
	goa "goa.design/goa/v3/pkg"
)

// ResortResultResponseCollection is the type of the "Points" service
// "GetResorts" endpoint HTTP response body.
type ResortResultResponseCollection []*ResortResultResponse

// ResortResultResponseResortOnlyCollection is the type of the "Points" service
// "GetResorts" endpoint HTTP response body.
type ResortResultResponseResortOnlyCollection []*ResortResultResponseResortOnly

// ResortResultResponseResortUpdateCollection is the type of the "Points"
// service "GetResorts" endpoint HTTP response body.
type ResortResultResponseResortUpdateCollection []*ResortResultResponseResortUpdate

// GetResortResponseBody is the type of the "Points" service "GetResort"
// endpoint HTTP response body.
type GetResortResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string                 `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetResortResponseBodyResortOnly is the type of the "Points" service
// "GetResort" endpoint HTTP response body.
type GetResortResponseBodyResortOnly struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetResortResponseBodyResortUpdate is the type of the "Points" service
// "GetResort" endpoint HTTP response body.
type GetResortResponseBodyResortUpdate struct {
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetResortYearResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body.
type GetResortYearResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// the year the resort info is for.
	Year      *int                    `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetPointChartResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body.
type GetPointChartResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's code
	Resort    *string                 `form:"resort,omitempty" json:"resort,omitempty" xml:"resort,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
	Tiers     []*TierResponseBody     `form:"tiers,omitempty" json:"tiers,omitempty" xml:"tiers,omitempty"`
}

// GetResortNotFoundResponseBody is the type of the "Points" service
// "GetResort" endpoint HTTP response body for the "not_found" error.
type GetResortNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetResortYearNotFoundResponseBody is the type of the "Points" service
// "GetResortYear" endpoint HTTP response body for the "not_found" error.
type GetResortYearNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPointChartNotFoundResponseBody is the type of the "Points" service
// "GetPointChart" endpoint HTTP response body for the "not_found" error.
type GetPointChartNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResortResultResponse is used to define fields on response body types.
type ResortResultResponse struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string             `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponse `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// RoomTypeResponse is used to define fields on response body types.
type RoomTypeResponse struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// ResortResultResponseResortOnly is used to define fields on response body
// types.
type ResortResultResponseResortOnly struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ResortResultResponseResortUpdate is used to define fields on response body
// types.
type ResortResultResponseResortUpdate struct {
	// resort's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RoomTypeResponseBody is used to define fields on response body types.
type RoomTypeResponseBody struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// TierResponseBody is used to define fields on response body types.
type TierResponseBody struct {
	DateRanges     []*TierDateRangeResponseBody               `form:"dateRanges,omitempty" json:"dateRanges,omitempty" xml:"dateRanges,omitempty"`
	RoomTypePoints map[string]*TierRoomTypePointsResponseBody `form:"roomTypePoints,omitempty" json:"roomTypePoints,omitempty" xml:"roomTypePoints,omitempty"`
}

// TierDateRangeResponseBody is used to define fields on response body types.
type TierDateRangeResponseBody struct {
	// start date
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// end date
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
}

// TierRoomTypePointsResponseBody is used to define fields on response body
// types.
type TierRoomTypePointsResponseBody struct {
	// points for Sunday - Thursday
	Weekday *int `form:"weekday,omitempty" json:"weekday,omitempty" xml:"weekday,omitempty"`
	// points for Friday - Saturday
	Weekend *int `form:"weekend,omitempty" json:"weekend,omitempty" xml:"weekend,omitempty"`
}

// NewResortResultResponseCollection builds the HTTP response body from the
// result of the "GetResorts" endpoint of the "Points" service.
func NewResortResultResponseCollection(res pointsviews.ResortResultCollectionView) ResortResultResponseCollection {
	body := make([]*ResortResultResponse, len(res))
	for i, val := range res {
		body[i] = marshalPointsviewsResortResultViewToResortResultResponse(val)
	}
	return body
}

// NewResortResultResponseResortOnlyCollection builds the HTTP response body
// from the result of the "GetResorts" endpoint of the "Points" service.
func NewResortResultResponseResortOnlyCollection(res pointsviews.ResortResultCollectionView) ResortResultResponseResortOnlyCollection {
	body := make([]*ResortResultResponseResortOnly, len(res))
	for i, val := range res {
		body[i] = marshalPointsviewsResortResultViewToResortResultResponseResortOnly(val)
	}
	return body
}

// NewResortResultResponseResortUpdateCollection builds the HTTP response body
// from the result of the "GetResorts" endpoint of the "Points" service.
func NewResortResultResponseResortUpdateCollection(res pointsviews.ResortResultCollectionView) ResortResultResponseResortUpdateCollection {
	body := make([]*ResortResultResponseResortUpdate, len(res))
	for i, val := range res {
		body[i] = marshalPointsviewsResortResultViewToResortResultResponseResortUpdate(val)
	}
	return body
}

// NewGetResortResponseBody builds the HTTP response body from the result of
// the "GetResort" endpoint of the "Points" service.
func NewGetResortResponseBody(res *pointsviews.ResortResultView) *GetResortResponseBody {
	body := &GetResortResponseBody{
		Code: res.Code,
		Name: res.Name,
	}
	if res.RoomTypes != nil {
		body.RoomTypes = make([]*RoomTypeResponseBody, len(res.RoomTypes))
		for i, val := range res.RoomTypes {
			body.RoomTypes[i] = marshalPointsviewsRoomTypeViewToRoomTypeResponseBody(val)
		}
	}
	return body
}

// NewGetResortResponseBodyResortOnly builds the HTTP response body from the
// result of the "GetResort" endpoint of the "Points" service.
func NewGetResortResponseBodyResortOnly(res *pointsviews.ResortResultView) *GetResortResponseBodyResortOnly {
	body := &GetResortResponseBodyResortOnly{
		Code: res.Code,
		Name: res.Name,
	}
	return body
}

// NewGetResortResponseBodyResortUpdate builds the HTTP response body from the
// result of the "GetResort" endpoint of the "Points" service.
func NewGetResortResponseBodyResortUpdate(res *pointsviews.ResortResultView) *GetResortResponseBodyResortUpdate {
	body := &GetResortResponseBodyResortUpdate{
		Name: res.Name,
	}
	return body
}

// NewGetResortYearResponseBody builds the HTTP response body from the result
// of the "GetResortYear" endpoint of the "Points" service.
func NewGetResortYearResponseBody(res *pointsviews.ResortYearResultView) *GetResortYearResponseBody {
	body := &GetResortYearResponseBody{
		Year: res.Year,
		Code: res.Code,
		Name: res.Name,
	}
	if res.RoomTypes != nil {
		body.RoomTypes = make([]*RoomTypeResponseBody, len(res.RoomTypes))
		for i, val := range res.RoomTypes {
			body.RoomTypes[i] = marshalPointsviewsRoomTypeViewToRoomTypeResponseBody(val)
		}
	}
	return body
}

// NewGetPointChartResponseBody builds the HTTP response body from the result
// of the "GetPointChart" endpoint of the "Points" service.
func NewGetPointChartResponseBody(res *points.PointChart) *GetPointChartResponseBody {
	body := &GetPointChartResponseBody{
		Code:   res.Code,
		Resort: res.Resort,
	}
	if res.RoomTypes != nil {
		body.RoomTypes = make([]*RoomTypeResponseBody, len(res.RoomTypes))
		for i, val := range res.RoomTypes {
			body.RoomTypes[i] = marshalPointsRoomTypeToRoomTypeResponseBody(val)
		}
	}
	if res.Tiers != nil {
		body.Tiers = make([]*TierResponseBody, len(res.Tiers))
		for i, val := range res.Tiers {
			body.Tiers[i] = marshalPointsTierToTierResponseBody(val)
		}
	}
	return body
}

// NewGetResortNotFoundResponseBody builds the HTTP response body from the
// result of the "GetResort" endpoint of the "Points" service.
func NewGetResortNotFoundResponseBody(res *goa.ServiceError) *GetResortNotFoundResponseBody {
	body := &GetResortNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetResortYearNotFoundResponseBody builds the HTTP response body from the
// result of the "GetResortYear" endpoint of the "Points" service.
func NewGetResortYearNotFoundResponseBody(res *goa.ServiceError) *GetResortYearNotFoundResponseBody {
	body := &GetResortYearNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPointChartNotFoundResponseBody builds the HTTP response body from the
// result of the "GetPointChart" endpoint of the "Points" service.
func NewGetPointChartNotFoundResponseBody(res *goa.ServiceError) *GetPointChartNotFoundResponseBody {
	body := &GetPointChartNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetResortPayload builds a Points service GetResort endpoint payload.
func NewGetResortPayload(resortCode string) *points.GetResortPayload {
	v := &points.GetResortPayload{}
	v.ResortCode = resortCode

	return v
}

// NewGetResortYearPayload builds a Points service GetResortYear endpoint
// payload.
func NewGetResortYearPayload(resortCode string, year int) *points.GetResortYearPayload {
	v := &points.GetResortYearPayload{}
	v.ResortCode = resortCode
	v.Year = year

	return v
}

// NewGetPointChartPayload builds a Points service GetPointChart endpoint
// payload.
func NewGetPointChartPayload(resortCode string, year int) *points.GetPointChartPayload {
	v := &points.GetPointChartPayload{}
	v.ResortCode = resortCode
	v.Year = year

	return v
}
