// Code generated by goa v3.8.2, DO NOT EDIT.
//
// dvcPointsCalculator HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package server

import (
	"context"
	"errors"
	"net/http"

	dvcpointscalculatorviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/dvc_points_calculator/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetResortsResponse returns an encoder for responses returned by the
// dvcPointsCalculator GetResorts endpoint.
func EncodeGetResortsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(dvcpointscalculatorviews.DvcpointcalculatorResortCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewDvcpointcalculatorResortResponseCollection(res.Projected)
		case "resortOnly":
			body = NewDvcpointcalculatorResortResponseResortOnlyCollection(res.Projected)
		case "resortUpdate":
			body = NewDvcpointcalculatorResortResponseResortUpdateCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetResortResponse returns an encoder for responses returned by the
// dvcPointsCalculator GetResort endpoint.
func EncodeGetResortResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*dvcpointscalculatorviews.DvcpointcalculatorResort)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewGetResortResponseBody(res.Projected)
		case "resortOnly":
			body = NewGetResortResponseBodyResortOnly(res.Projected)
		case "resortUpdate":
			body = NewGetResortResponseBodyResortUpdate(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetResortRequest returns a decoder for requests sent to the
// dvcPointsCalculator GetResort endpoint.
func DecodeGetResortRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			resortCode string
			err        error

			params = mux.Vars(r)
		)
		resortCode = params["resortCode"]
		err = goa.MergeErrors(err, goa.ValidatePattern("resortCode", resortCode, "[a-z]{3}"))
		if err != nil {
			return nil, err
		}
		payload := NewGetResortPayload(resortCode)

		return payload, nil
	}
}

// EncodeGetResortError returns an encoder for errors returned by the GetResort
// dvcPointsCalculator endpoint.
func EncodeGetResortError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetResortNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalDvcpointscalculatorviewsDvcpointcalculatorResortViewToDvcpointcalculatorResortResponse
// builds a value of type *DvcpointcalculatorResortResponse from a value of
// type *dvcpointscalculatorviews.DvcpointcalculatorResortView.
func marshalDvcpointscalculatorviewsDvcpointcalculatorResortViewToDvcpointcalculatorResortResponse(v *dvcpointscalculatorviews.DvcpointcalculatorResortView) *DvcpointcalculatorResortResponse {
	res := &DvcpointcalculatorResortResponse{
		Code: v.Code,
		Name: v.Name,
	}
	if v.RoomTypes != nil {
		res.RoomTypes = make([]*RoomTypeResponse, len(v.RoomTypes))
		for i, val := range v.RoomTypes {
			res.RoomTypes[i] = marshalDvcpointscalculatorviewsRoomTypeViewToRoomTypeResponse(val)
		}
	}

	return res
}

// marshalDvcpointscalculatorviewsRoomTypeViewToRoomTypeResponse builds a value
// of type *RoomTypeResponse from a value of type
// *dvcpointscalculatorviews.RoomTypeView.
func marshalDvcpointscalculatorviewsRoomTypeViewToRoomTypeResponse(v *dvcpointscalculatorviews.RoomTypeView) *RoomTypeResponse {
	if v == nil {
		return nil
	}
	res := &RoomTypeResponse{
		Code:     v.Code,
		Name:     v.Name,
		Sleeps:   v.Sleeps,
		Bedrooms: v.Bedrooms,
		Beds:     v.Beds,
	}

	return res
}

// marshalDvcpointscalculatorviewsDvcpointcalculatorResortViewToDvcpointcalculatorResortResponseResortOnly
// builds a value of type *DvcpointcalculatorResortResponseResortOnly from a
// value of type *dvcpointscalculatorviews.DvcpointcalculatorResortView.
func marshalDvcpointscalculatorviewsDvcpointcalculatorResortViewToDvcpointcalculatorResortResponseResortOnly(v *dvcpointscalculatorviews.DvcpointcalculatorResortView) *DvcpointcalculatorResortResponseResortOnly {
	res := &DvcpointcalculatorResortResponseResortOnly{
		Code: v.Code,
		Name: v.Name,
	}

	return res
}

// marshalDvcpointscalculatorviewsDvcpointcalculatorResortViewToDvcpointcalculatorResortResponseResortUpdate
// builds a value of type *DvcpointcalculatorResortResponseResortUpdate from a
// value of type *dvcpointscalculatorviews.DvcpointcalculatorResortView.
func marshalDvcpointscalculatorviewsDvcpointcalculatorResortViewToDvcpointcalculatorResortResponseResortUpdate(v *dvcpointscalculatorviews.DvcpointcalculatorResortView) *DvcpointcalculatorResortResponseResortUpdate {
	res := &DvcpointcalculatorResortResponseResortUpdate{
		Name: v.Name,
	}

	return res
}

// marshalDvcpointscalculatorviewsRoomTypeViewToRoomTypeResponseBody builds a
// value of type *RoomTypeResponseBody from a value of type
// *dvcpointscalculatorviews.RoomTypeView.
func marshalDvcpointscalculatorviewsRoomTypeViewToRoomTypeResponseBody(v *dvcpointscalculatorviews.RoomTypeView) *RoomTypeResponseBody {
	if v == nil {
		return nil
	}
	res := &RoomTypeResponseBody{
		Code:     v.Code,
		Name:     v.Name,
		Sleeps:   v.Sleeps,
		Bedrooms: v.Bedrooms,
		Beds:     v.Beds,
	}

	return res
}
