// Code generated by goa v3.8.2, DO NOT EDIT.
//
// dvcPointsCalculator HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	dvcpointscalculator "github.com/danapsimer/dvc-points-calculator/api/goa/gen/dvc_points_calculator"
	dvcpointscalculatorviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/dvc_points_calculator/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetResortsRequest instantiates a HTTP request object with method and
// path set to call the "dvcPointsCalculator" service "GetResorts" endpoint
func (c *Client) BuildGetResortsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetResortsDvcPointsCalculatorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("dvcPointsCalculator", "GetResorts", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResortsResponse returns a decoder for responses returned by the
// dvcPointsCalculator GetResorts endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetResortsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResortsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dvcPointsCalculator", "GetResorts", err)
			}
			p := NewGetResortsDvcpointcalculatorResortCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := dvcpointscalculatorviews.DvcpointcalculatorResortCollection{Projected: p, View: view}
			if err = dvcpointscalculatorviews.ValidateDvcpointcalculatorResortCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("dvcPointsCalculator", "GetResorts", err)
			}
			res := dvcpointscalculator.NewDvcpointcalculatorResortCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("dvcPointsCalculator", "GetResorts", resp.StatusCode, string(body))
		}
	}
}

// BuildGetResortRequest instantiates a HTTP request object with method and
// path set to call the "dvcPointsCalculator" service "GetResort" endpoint
func (c *Client) BuildGetResortRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		resortCode string
	)
	{
		p, ok := v.(*dvcpointscalculator.GetResortPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("dvcPointsCalculator", "GetResort", "*dvcpointscalculator.GetResortPayload", v)
		}
		resortCode = p.ResortCode
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetResortDvcPointsCalculatorPath(resortCode)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("dvcPointsCalculator", "GetResort", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResortResponse returns a decoder for responses returned by the
// dvcPointsCalculator GetResort endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetResortResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeGetResortResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResortResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dvcPointsCalculator", "GetResort", err)
			}
			p := NewGetResortDvcpointcalculatorResortOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &dvcpointscalculatorviews.DvcpointcalculatorResort{Projected: p, View: view}
			if err = dvcpointscalculatorviews.ValidateDvcpointcalculatorResort(vres); err != nil {
				return nil, goahttp.ErrValidationError("dvcPointsCalculator", "GetResort", err)
			}
			res := dvcpointscalculator.NewDvcpointcalculatorResort(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetResortNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dvcPointsCalculator", "GetResort", err)
			}
			err = ValidateGetResortNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("dvcPointsCalculator", "GetResort", err)
			}
			return nil, NewGetResortNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("dvcPointsCalculator", "GetResort", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDvcpointcalculatorResortResponseToDvcpointscalculatorviewsDvcpointcalculatorResortView
// builds a value of type
// *dvcpointscalculatorviews.DvcpointcalculatorResortView from a value of type
// *DvcpointcalculatorResortResponse.
func unmarshalDvcpointcalculatorResortResponseToDvcpointscalculatorviewsDvcpointcalculatorResortView(v *DvcpointcalculatorResortResponse) *dvcpointscalculatorviews.DvcpointcalculatorResortView {
	res := &dvcpointscalculatorviews.DvcpointcalculatorResortView{
		Code: v.Code,
		Name: v.Name,
	}
	if v.RoomTypes != nil {
		res.RoomTypes = make([]*dvcpointscalculatorviews.RoomTypeView, len(v.RoomTypes))
		for i, val := range v.RoomTypes {
			res.RoomTypes[i] = unmarshalRoomTypeResponseToDvcpointscalculatorviewsRoomTypeView(val)
		}
	}

	return res
}

// unmarshalRoomTypeResponseToDvcpointscalculatorviewsRoomTypeView builds a
// value of type *dvcpointscalculatorviews.RoomTypeView from a value of type
// *RoomTypeResponse.
func unmarshalRoomTypeResponseToDvcpointscalculatorviewsRoomTypeView(v *RoomTypeResponse) *dvcpointscalculatorviews.RoomTypeView {
	if v == nil {
		return nil
	}
	res := &dvcpointscalculatorviews.RoomTypeView{
		Code:     v.Code,
		Name:     v.Name,
		Sleeps:   v.Sleeps,
		Bedrooms: v.Bedrooms,
		Beds:     v.Beds,
	}

	return res
}

// unmarshalRoomTypeResponseBodyToDvcpointscalculatorviewsRoomTypeView builds a
// value of type *dvcpointscalculatorviews.RoomTypeView from a value of type
// *RoomTypeResponseBody.
func unmarshalRoomTypeResponseBodyToDvcpointscalculatorviewsRoomTypeView(v *RoomTypeResponseBody) *dvcpointscalculatorviews.RoomTypeView {
	if v == nil {
		return nil
	}
	res := &dvcpointscalculatorviews.RoomTypeView{
		Code:     v.Code,
		Name:     v.Name,
		Sleeps:   v.Sleeps,
		Bedrooms: v.Bedrooms,
		Beds:     v.Beds,
	}

	return res
}
