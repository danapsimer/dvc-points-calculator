// Code generated by goa v3.8.2, DO NOT EDIT.
//
// dvcPointsCalculator HTTP client types
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package client

import (
	dvcpointscalculatorviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/dvc_points_calculator/views"
	goa "goa.design/goa/v3/pkg"
)

// GetResortsResponseBody is the type of the "dvcPointsCalculator" service
// "GetResorts" endpoint HTTP response body.
type GetResortsResponseBody []*DvcpointcalculatorResortResponse

// GetResortResponseBody is the type of the "dvcPointsCalculator" service
// "GetResort" endpoint HTTP response body.
type GetResortResponseBody struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string                 `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponseBody `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// GetResortNotFoundResponseBody is the type of the "dvcPointsCalculator"
// service "GetResort" endpoint HTTP response body for the "not_found" error.
type GetResortNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DvcpointcalculatorResortResponse is used to define fields on response body
// types.
type DvcpointcalculatorResortResponse struct {
	// resort's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// resort's name
	Name      *string             `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	RoomTypes []*RoomTypeResponse `form:"roomTypes,omitempty" json:"roomTypes,omitempty" xml:"roomTypes,omitempty"`
}

// RoomTypeResponse is used to define fields on response body types.
type RoomTypeResponse struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// RoomTypeResponseBody is used to define fields on response body types.
type RoomTypeResponseBody struct {
	// room type's code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// room type's name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// max room capacity
	Sleeps *int `form:"sleeps,omitempty" json:"sleeps,omitempty" xml:"sleeps,omitempty"`
	// number of bedrooms
	Bedrooms *int `form:"bedrooms,omitempty" json:"bedrooms,omitempty" xml:"bedrooms,omitempty"`
	// number of beds
	Beds *int `form:"beds,omitempty" json:"beds,omitempty" xml:"beds,omitempty"`
}

// NewGetResortsDvcpointcalculatorResortCollectionOK builds a
// "dvcPointsCalculator" service "GetResorts" endpoint result from a HTTP "OK"
// response.
func NewGetResortsDvcpointcalculatorResortCollectionOK(body GetResortsResponseBody) dvcpointscalculatorviews.DvcpointcalculatorResortCollectionView {
	v := make([]*dvcpointscalculatorviews.DvcpointcalculatorResortView, len(body))
	for i, val := range body {
		v[i] = unmarshalDvcpointcalculatorResortResponseToDvcpointscalculatorviewsDvcpointcalculatorResortView(val)
	}

	return v
}

// NewGetResortDvcpointcalculatorResortOK builds a "dvcPointsCalculator"
// service "GetResort" endpoint result from a HTTP "OK" response.
func NewGetResortDvcpointcalculatorResortOK(body *GetResortResponseBody) *dvcpointscalculatorviews.DvcpointcalculatorResortView {
	v := &dvcpointscalculatorviews.DvcpointcalculatorResortView{
		Code: body.Code,
		Name: body.Name,
	}
	if body.RoomTypes != nil {
		v.RoomTypes = make([]*dvcpointscalculatorviews.RoomTypeView, len(body.RoomTypes))
		for i, val := range body.RoomTypes {
			v.RoomTypes[i] = unmarshalRoomTypeResponseBodyToDvcpointscalculatorviewsRoomTypeView(val)
		}
	}

	return v
}

// NewGetResortNotFound builds a dvcPointsCalculator service GetResort endpoint
// not_found error.
func NewGetResortNotFound(body *GetResortNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetResortNotFoundResponseBody runs the validations defined on
// GetResort_not_found_Response_Body
func ValidateGetResortNotFoundResponseBody(body *GetResortNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDvcpointcalculatorResortResponse runs the validations defined on
// DvcpointcalculatorResortResponse
func ValidateDvcpointcalculatorResortResponse(body *DvcpointcalculatorResortResponse) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z]{3}"))
	}
	for _, e := range body.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRoomTypeResponse runs the validations defined on RoomTypeResponse
func ValidateRoomTypeResponse(body *RoomTypeResponse) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z0-9]{3}"))
	}
	return
}

// ValidateRoomTypeResponseBody runs the validations defined on
// RoomTypeResponseBody
func ValidateRoomTypeResponseBody(body *RoomTypeResponseBody) (err error) {
	if body.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.code", *body.Code, "[a-z0-9]{3}"))
	}
	return
}
