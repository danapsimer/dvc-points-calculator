// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points views
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ResortResultCollection is the viewed result type that is projected based on
// a view.
type ResortResultCollection struct {
	// Type to project
	Projected ResortResultCollectionView
	// View to render
	View string
}

// ResortResult is the viewed result type that is projected based on a view.
type ResortResult struct {
	// Type to project
	Projected *ResortResultView
	// View to render
	View string
}

// ResortYearResult is the viewed result type that is projected based on a view.
type ResortYearResult struct {
	// Type to project
	Projected *ResortYearResultView
	// View to render
	View string
}

// ResortResultCollectionView is a type that runs validations on a projected
// type.
type ResortResultCollectionView []*ResortResultView

// ResortResultView is a type that runs validations on a projected type.
type ResortResultView struct {
	// resort's code
	Code *string
	// resort's name
	Name      *string
	RoomTypes []*RoomTypeView
}

// RoomTypeView is a type that runs validations on a projected type.
type RoomTypeView struct {
	// room type's code
	Code *string
	// room type's name
	Name *string
	// max room capacity
	Sleeps *int
	// number of bedrooms
	Bedrooms *int
	// number of beds
	Beds *int
}

// ResortYearResultView is a type that runs validations on a projected type.
type ResortYearResultView struct {
	// the year the resort info is for.
	Year *int
	// resort's code
	Code *string
	// resort's name
	Name      *string
	RoomTypes []*RoomTypeView
}

var (
	// ResortResultCollectionMap is a map indexing the attribute names of
	// ResortResultCollection by view name.
	ResortResultCollectionMap = map[string][]string{
		"default": {
			"code",
			"name",
			"roomTypes",
		},
		"resortOnly": {
			"code",
			"name",
		},
		"resortUpdate": {
			"name",
		},
	}
	// ResortResultMap is a map indexing the attribute names of ResortResult by
	// view name.
	ResortResultMap = map[string][]string{
		"default": {
			"code",
			"name",
			"roomTypes",
		},
		"resortOnly": {
			"code",
			"name",
		},
		"resortUpdate": {
			"name",
		},
	}
	// ResortYearResultMap is a map indexing the attribute names of
	// ResortYearResult by view name.
	ResortYearResultMap = map[string][]string{
		"default": {
			"code",
			"name",
			"year",
			"roomTypes",
		},
	}
)

// ValidateResortResultCollection runs the validations defined on the viewed
// result type ResortResultCollection.
func ValidateResortResultCollection(result ResortResultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResortResultCollectionView(result.Projected)
	case "resortOnly":
		err = ValidateResortResultCollectionViewResortOnly(result.Projected)
	case "resortUpdate":
		err = ValidateResortResultCollectionViewResortUpdate(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "resortOnly", "resortUpdate"})
	}
	return
}

// ValidateResortResult runs the validations defined on the viewed result type
// ResortResult.
func ValidateResortResult(result *ResortResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResortResultView(result.Projected)
	case "resortOnly":
		err = ValidateResortResultViewResortOnly(result.Projected)
	case "resortUpdate":
		err = ValidateResortResultViewResortUpdate(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "resortOnly", "resortUpdate"})
	}
	return
}

// ValidateResortYearResult runs the validations defined on the viewed result
// type ResortYearResult.
func ValidateResortYearResult(result *ResortYearResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResortYearResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateResortResultCollectionView runs the validations defined on
// ResortResultCollectionView using the "default" view.
func ValidateResortResultCollectionView(result ResortResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateResortResultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateResortResultCollectionViewResortOnly runs the validations defined on
// ResortResultCollectionView using the "resortOnly" view.
func ValidateResortResultCollectionViewResortOnly(result ResortResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateResortResultViewResortOnly(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateResortResultCollectionViewResortUpdate runs the validations defined
// on ResortResultCollectionView using the "resortUpdate" view.
func ValidateResortResultCollectionViewResortUpdate(result ResortResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateResortResultViewResortUpdate(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateResortResultView runs the validations defined on ResortResultView
// using the "default" view.
func ValidateResortResultView(result *ResortResultView) (err error) {
	if result.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.code", *result.Code, "[a-z]{3}"))
	}
	for _, e := range result.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResortResultViewResortOnly runs the validations defined on
// ResortResultView using the "resortOnly" view.
func ValidateResortResultViewResortOnly(result *ResortResultView) (err error) {
	if result.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.code", *result.Code, "[a-z]{3}"))
	}
	return
}

// ValidateResortResultViewResortUpdate runs the validations defined on
// ResortResultView using the "resortUpdate" view.
func ValidateResortResultViewResortUpdate(result *ResortResultView) (err error) {

	return
}

// ValidateRoomTypeView runs the validations defined on RoomTypeView.
func ValidateRoomTypeView(result *RoomTypeView) (err error) {
	if result.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.code", *result.Code, "[a-z0-9]{3}"))
	}
	if result.Sleeps != nil {
		if *result.Sleeps < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.sleeps", *result.Sleeps, 1, true))
		}
	}
	if result.Sleeps != nil {
		if *result.Sleeps > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.sleeps", *result.Sleeps, 12, false))
		}
	}
	if result.Bedrooms != nil {
		if *result.Bedrooms < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.bedrooms", *result.Bedrooms, 0, true))
		}
	}
	if result.Bedrooms != nil {
		if *result.Bedrooms > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.bedrooms", *result.Bedrooms, 3, false))
		}
	}
	if result.Beds != nil {
		if *result.Beds < 2 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.beds", *result.Beds, 2, true))
		}
	}
	if result.Beds != nil {
		if *result.Beds > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.beds", *result.Beds, 6, false))
		}
	}
	return
}

// ValidateResortYearResultView runs the validations defined on
// ResortYearResultView using the "default" view.
func ValidateResortYearResultView(result *ResortYearResultView) (err error) {
	if result.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.code", *result.Code, "[a-z]{3}"))
	}
	if result.Year != nil {
		if *result.Year < 1990 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.year", *result.Year, 1990, true))
		}
	}
	if result.Year != nil {
		if *result.Year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.year", *result.Year, 2100, false))
		}
	}
	for _, e := range result.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
