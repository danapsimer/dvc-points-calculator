// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points service
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package points

import (
	"context"

	pointsviews "github.com/danapsimer/dvc-points-calculator/api/goa/gen/points/views"
	goa "goa.design/goa/v3/pkg"
)

// provides resources for manipulating resorts, point charts, and querying stays
type Service interface {
	// GetResorts implements GetResorts.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "resortOnly"
	//	- "resortUpdate"
	GetResorts(context.Context) (res ResortResultCollection, view string, err error)
	// GetResort implements GetResort.
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "resortOnly"
	//	- "resortUpdate"
	GetResort(context.Context, *GetResortPayload) (res *ResortResult, view string, err error)
	// GetResortYear implements GetResortYear.
	GetResortYear(context.Context, *GetResortYearPayload) (res *ResortYearResult, err error)
	// GetPointChart implements GetPointChart.
	GetPointChart(context.Context, *GetPointChartPayload) (res *PointChart, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Points"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"GetResorts", "GetResort", "GetResortYear", "GetPointChart"}

// GetPointChartPayload is the payload type of the Points service GetPointChart
// method.
type GetPointChartPayload struct {
	// the resort's code
	ResortCode string
	// the year
	Year int
}

// GetResortPayload is the payload type of the Points service GetResort method.
type GetResortPayload struct {
	// the resort's code
	ResortCode string
}

// GetResortYearPayload is the payload type of the Points service GetResortYear
// method.
type GetResortYearPayload struct {
	// the resort's code
	ResortCode string
	// the year
	Year int
}

// PointChart is the result type of the Points service GetPointChart method.
type PointChart struct {
	// resort's code
	Code *string
	// resort's code
	Resort    *string
	RoomTypes []*RoomType
	Tiers     []*Tier
}

// ResortResult is the result type of the Points service GetResort method.
type ResortResult struct {
	// resort's code
	Code *string
	// resort's name
	Name      *string
	RoomTypes []*RoomType
}

// ResortResultCollection is the result type of the Points service GetResorts
// method.
type ResortResultCollection []*ResortResult

// ResortYearResult is the result type of the Points service GetResortYear
// method.
type ResortYearResult struct {
	// the year the resort info is for.
	Year *int
	// resort's code
	Code *string
	// resort's name
	Name      *string
	RoomTypes []*RoomType
}

type RoomType struct {
	// room type's code
	Code *string
	// room type's name
	Name *string
	// max room capacity
	Sleeps *int
	// number of bedrooms
	Bedrooms *int
	// number of beds
	Beds *int
}

type Tier struct {
	DateRanges     []*TierDateRange
	RoomTypePoints map[string]*TierRoomTypePoints
}

type TierDateRange struct {
	// start date
	StartDate *string
	// end date
	EndDate *string
}

type TierRoomTypePoints struct {
	// points for Sunday - Thursday
	Weekday *int
	// points for Friday - Saturday
	Weekend *int
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// NewResortResultCollection initializes result type ResortResultCollection
// from viewed result type ResortResultCollection.
func NewResortResultCollection(vres pointsviews.ResortResultCollection) ResortResultCollection {
	var res ResortResultCollection
	switch vres.View {
	case "default", "":
		res = newResortResultCollection(vres.Projected)
	case "resortOnly":
		res = newResortResultCollectionResortOnly(vres.Projected)
	case "resortUpdate":
		res = newResortResultCollectionResortUpdate(vres.Projected)
	}
	return res
}

// NewViewedResortResultCollection initializes viewed result type
// ResortResultCollection from result type ResortResultCollection using the
// given view.
func NewViewedResortResultCollection(res ResortResultCollection, view string) pointsviews.ResortResultCollection {
	var vres pointsviews.ResortResultCollection
	switch view {
	case "default", "":
		p := newResortResultCollectionView(res)
		vres = pointsviews.ResortResultCollection{Projected: p, View: "default"}
	case "resortOnly":
		p := newResortResultCollectionViewResortOnly(res)
		vres = pointsviews.ResortResultCollection{Projected: p, View: "resortOnly"}
	case "resortUpdate":
		p := newResortResultCollectionViewResortUpdate(res)
		vres = pointsviews.ResortResultCollection{Projected: p, View: "resortUpdate"}
	}
	return vres
}

// NewResortResult initializes result type ResortResult from viewed result type
// ResortResult.
func NewResortResult(vres *pointsviews.ResortResult) *ResortResult {
	var res *ResortResult
	switch vres.View {
	case "default", "":
		res = newResortResult(vres.Projected)
	case "resortOnly":
		res = newResortResultResortOnly(vres.Projected)
	case "resortUpdate":
		res = newResortResultResortUpdate(vres.Projected)
	}
	return res
}

// NewViewedResortResult initializes viewed result type ResortResult from
// result type ResortResult using the given view.
func NewViewedResortResult(res *ResortResult, view string) *pointsviews.ResortResult {
	var vres *pointsviews.ResortResult
	switch view {
	case "default", "":
		p := newResortResultView(res)
		vres = &pointsviews.ResortResult{Projected: p, View: "default"}
	case "resortOnly":
		p := newResortResultViewResortOnly(res)
		vres = &pointsviews.ResortResult{Projected: p, View: "resortOnly"}
	case "resortUpdate":
		p := newResortResultViewResortUpdate(res)
		vres = &pointsviews.ResortResult{Projected: p, View: "resortUpdate"}
	}
	return vres
}

// NewResortYearResult initializes result type ResortYearResult from viewed
// result type ResortYearResult.
func NewResortYearResult(vres *pointsviews.ResortYearResult) *ResortYearResult {
	return newResortYearResult(vres.Projected)
}

// NewViewedResortYearResult initializes viewed result type ResortYearResult
// from result type ResortYearResult using the given view.
func NewViewedResortYearResult(res *ResortYearResult, view string) *pointsviews.ResortYearResult {
	p := newResortYearResultView(res)
	return &pointsviews.ResortYearResult{Projected: p, View: "default"}
}

// newResortResultCollection converts projected type ResortResultCollection to
// service type ResortResultCollection.
func newResortResultCollection(vres pointsviews.ResortResultCollectionView) ResortResultCollection {
	res := make(ResortResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newResortResult(n)
	}
	return res
}

// newResortResultCollectionResortOnly converts projected type
// ResortResultCollection to service type ResortResultCollection.
func newResortResultCollectionResortOnly(vres pointsviews.ResortResultCollectionView) ResortResultCollection {
	res := make(ResortResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newResortResultResortOnly(n)
	}
	return res
}

// newResortResultCollectionResortUpdate converts projected type
// ResortResultCollection to service type ResortResultCollection.
func newResortResultCollectionResortUpdate(vres pointsviews.ResortResultCollectionView) ResortResultCollection {
	res := make(ResortResultCollection, len(vres))
	for i, n := range vres {
		res[i] = newResortResultResortUpdate(n)
	}
	return res
}

// newResortResultCollectionView projects result type ResortResultCollection to
// projected type ResortResultCollectionView using the "default" view.
func newResortResultCollectionView(res ResortResultCollection) pointsviews.ResortResultCollectionView {
	vres := make(pointsviews.ResortResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newResortResultView(n)
	}
	return vres
}

// newResortResultCollectionViewResortOnly projects result type
// ResortResultCollection to projected type ResortResultCollectionView using
// the "resortOnly" view.
func newResortResultCollectionViewResortOnly(res ResortResultCollection) pointsviews.ResortResultCollectionView {
	vres := make(pointsviews.ResortResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newResortResultViewResortOnly(n)
	}
	return vres
}

// newResortResultCollectionViewResortUpdate projects result type
// ResortResultCollection to projected type ResortResultCollectionView using
// the "resortUpdate" view.
func newResortResultCollectionViewResortUpdate(res ResortResultCollection) pointsviews.ResortResultCollectionView {
	vres := make(pointsviews.ResortResultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newResortResultViewResortUpdate(n)
	}
	return vres
}

// newResortResult converts projected type ResortResult to service type
// ResortResult.
func newResortResult(vres *pointsviews.ResortResultView) *ResortResult {
	res := &ResortResult{
		Code: vres.Code,
		Name: vres.Name,
	}
	if vres.RoomTypes != nil {
		res.RoomTypes = make([]*RoomType, len(vres.RoomTypes))
		for i, val := range vres.RoomTypes {
			res.RoomTypes[i] = transformPointsviewsRoomTypeViewToRoomType(val)
		}
	}
	return res
}

// newResortResultResortOnly converts projected type ResortResult to service
// type ResortResult.
func newResortResultResortOnly(vres *pointsviews.ResortResultView) *ResortResult {
	res := &ResortResult{
		Code: vres.Code,
		Name: vres.Name,
	}
	return res
}

// newResortResultResortUpdate converts projected type ResortResult to service
// type ResortResult.
func newResortResultResortUpdate(vres *pointsviews.ResortResultView) *ResortResult {
	res := &ResortResult{
		Name: vres.Name,
	}
	return res
}

// newResortResultView projects result type ResortResult to projected type
// ResortResultView using the "default" view.
func newResortResultView(res *ResortResult) *pointsviews.ResortResultView {
	vres := &pointsviews.ResortResultView{
		Code: res.Code,
		Name: res.Name,
	}
	if res.RoomTypes != nil {
		vres.RoomTypes = make([]*pointsviews.RoomTypeView, len(res.RoomTypes))
		for i, val := range res.RoomTypes {
			vres.RoomTypes[i] = transformRoomTypeToPointsviewsRoomTypeView(val)
		}
	}
	return vres
}

// newResortResultViewResortOnly projects result type ResortResult to projected
// type ResortResultView using the "resortOnly" view.
func newResortResultViewResortOnly(res *ResortResult) *pointsviews.ResortResultView {
	vres := &pointsviews.ResortResultView{
		Code: res.Code,
		Name: res.Name,
	}
	return vres
}

// newResortResultViewResortUpdate projects result type ResortResult to
// projected type ResortResultView using the "resortUpdate" view.
func newResortResultViewResortUpdate(res *ResortResult) *pointsviews.ResortResultView {
	vres := &pointsviews.ResortResultView{
		Name: res.Name,
	}
	return vres
}

// newResortYearResult converts projected type ResortYearResult to service type
// ResortYearResult.
func newResortYearResult(vres *pointsviews.ResortYearResultView) *ResortYearResult {
	res := &ResortYearResult{
		Code: vres.Code,
		Name: vres.Name,
		Year: vres.Year,
	}
	if vres.RoomTypes != nil {
		res.RoomTypes = make([]*RoomType, len(vres.RoomTypes))
		for i, val := range vres.RoomTypes {
			res.RoomTypes[i] = transformPointsviewsRoomTypeViewToRoomType(val)
		}
	}
	return res
}

// newResortYearResultView projects result type ResortYearResult to projected
// type ResortYearResultView using the "default" view.
func newResortYearResultView(res *ResortYearResult) *pointsviews.ResortYearResultView {
	vres := &pointsviews.ResortYearResultView{
		Year: res.Year,
		Code: res.Code,
		Name: res.Name,
	}
	if res.RoomTypes != nil {
		vres.RoomTypes = make([]*pointsviews.RoomTypeView, len(res.RoomTypes))
		for i, val := range res.RoomTypes {
			vres.RoomTypes[i] = transformRoomTypeToPointsviewsRoomTypeView(val)
		}
	}
	return vres
}

// transformPointsviewsRoomTypeViewToRoomType builds a value of type *RoomType
// from a value of type *pointsviews.RoomTypeView.
func transformPointsviewsRoomTypeViewToRoomType(v *pointsviews.RoomTypeView) *RoomType {
	if v == nil {
		return nil
	}
	res := &RoomType{
		Code:     v.Code,
		Name:     v.Name,
		Sleeps:   v.Sleeps,
		Bedrooms: v.Bedrooms,
		Beds:     v.Beds,
	}

	return res
}

// transformRoomTypeToPointsviewsRoomTypeView builds a value of type
// *pointsviews.RoomTypeView from a value of type *RoomType.
func transformRoomTypeToPointsviewsRoomTypeView(v *RoomType) *pointsviews.RoomTypeView {
	if v == nil {
		return nil
	}
	res := &pointsviews.RoomTypeView{
		Code:     v.Code,
		Name:     v.Name,
		Sleeps:   v.Sleeps,
		Bedrooms: v.Bedrooms,
		Beds:     v.Beds,
	}

	return res
}
