// Code generated by goa v3.8.2, DO NOT EDIT.
//
// Points service type conversion functions
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package points

import (
	model "github.com/danapsimer/dvc-points-calculator/model"
)

// ConvertToRoomType creates an instance of RoomType initialized from t.
func (t *RoomType) ConvertToRoomType() *model.RoomType {
	v := &model.RoomType{}
	if t.Code != nil {
		v.Code = *t.Code
	}
	if t.Name != nil {
		v.Name = *t.Name
	}
	if t.Sleeps != nil {
		v.Sleeps = *t.Sleeps
	}
	if t.Bedrooms != nil {
		v.Bedrooms = *t.Bedrooms
	}
	if t.Beds != nil {
		v.Beds = *t.Beds
	}
	return v
}

// CreateFromRoomType initializes t from the fields of v
func (t *RoomType) CreateFromRoomType(v *model.RoomType) {
	temp := &RoomType{
		Name:     &v.Name,
		Code:     &v.Code,
		Sleeps:   &v.Sleeps,
		Bedrooms: &v.Bedrooms,
		Beds:     &v.Beds,
	}
	*t = *temp
}

// CreateFromResort initializes t from the fields of v
func (t *ResortResult) CreateFromResort(v *model.Resort) {
	temp := &ResortResult{
		Name: &v.Name,
		Code: &v.Code,
	}
	if v.RoomTypes != nil {
		temp.RoomTypes = make([]*RoomType, len(v.RoomTypes))
		for i, val := range v.RoomTypes {
			temp.RoomTypes[i] = transformModelRoomTypeToRoomType(val)
		}
	}
	*t = *temp
}

// CreateFromResort2 initializes t from the fields of v
func (t *ResortResult) CreateFromResort2(v *model.Resort) {
	temp := &ResortResult{
		Name: &v.Name,
		Code: &v.Code,
	}
	if v.RoomTypes != nil {
		temp.RoomTypes = make([]*RoomType, len(v.RoomTypes))
		for i, val := range v.RoomTypes {
			temp.RoomTypes[i] = transformModelRoomTypeToRoomType(val)
		}
	}
	*t = *temp
}

// transformModelRoomTypeToRoomType builds a value of type *RoomType from a
// value of type *model.RoomType.
func transformModelRoomTypeToRoomType(v *model.RoomType) *RoomType {
	if v == nil {
		return nil
	}
	res := &RoomType{
		Name:     &v.Name,
		Code:     &v.Code,
		Sleeps:   &v.Sleeps,
		Bedrooms: &v.Bedrooms,
		Beds:     &v.Beds,
	}

	return res
}
