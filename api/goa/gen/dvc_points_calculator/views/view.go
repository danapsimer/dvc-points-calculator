// Code generated by goa v3.8.2, DO NOT EDIT.
//
// dvcPointsCalculator views
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// DvcpointcalculatorResortCollection is the viewed result type that is
// projected based on a view.
type DvcpointcalculatorResortCollection struct {
	// Type to project
	Projected DvcpointcalculatorResortCollectionView
	// View to render
	View string
}

// DvcpointcalculatorResort is the viewed result type that is projected based
// on a view.
type DvcpointcalculatorResort struct {
	// Type to project
	Projected *DvcpointcalculatorResortView
	// View to render
	View string
}

// DvcpointcalculatorResortCollectionView is a type that runs validations on a
// projected type.
type DvcpointcalculatorResortCollectionView []*DvcpointcalculatorResortView

// DvcpointcalculatorResortView is a type that runs validations on a projected
// type.
type DvcpointcalculatorResortView struct {
	// resort's code
	Code *string
	// resort's name
	Name      *string
	RoomTypes []*RoomTypeView
}

// RoomTypeView is a type that runs validations on a projected type.
type RoomTypeView struct {
	// room type's code
	Code *string
	// room type's name
	Name *string
	// max room capacity
	Sleeps *int
	// number of bedrooms
	Bedrooms *int
	// number of beds
	Beds *int
}

var (
	// DvcpointcalculatorResortCollectionMap is a map indexing the attribute names
	// of DvcpointcalculatorResortCollection by view name.
	DvcpointcalculatorResortCollectionMap = map[string][]string{
		"default": {
			"code",
			"name",
			"roomTypes",
		},
		"resortOnly": {
			"code",
			"name",
		},
		"resortUpdate": {
			"name",
		},
	}
	// DvcpointcalculatorResortMap is a map indexing the attribute names of
	// DvcpointcalculatorResort by view name.
	DvcpointcalculatorResortMap = map[string][]string{
		"default": {
			"code",
			"name",
			"roomTypes",
		},
		"resortOnly": {
			"code",
			"name",
		},
		"resortUpdate": {
			"name",
		},
	}
)

// ValidateDvcpointcalculatorResortCollection runs the validations defined on
// the viewed result type DvcpointcalculatorResortCollection.
func ValidateDvcpointcalculatorResortCollection(result DvcpointcalculatorResortCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateDvcpointcalculatorResortCollectionView(result.Projected)
	case "resortOnly":
		err = ValidateDvcpointcalculatorResortCollectionViewResortOnly(result.Projected)
	case "resortUpdate":
		err = ValidateDvcpointcalculatorResortCollectionViewResortUpdate(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "resortOnly", "resortUpdate"})
	}
	return
}

// ValidateDvcpointcalculatorResort runs the validations defined on the viewed
// result type DvcpointcalculatorResort.
func ValidateDvcpointcalculatorResort(result *DvcpointcalculatorResort) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateDvcpointcalculatorResortView(result.Projected)
	case "resortOnly":
		err = ValidateDvcpointcalculatorResortViewResortOnly(result.Projected)
	case "resortUpdate":
		err = ValidateDvcpointcalculatorResortViewResortUpdate(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "resortOnly", "resortUpdate"})
	}
	return
}

// ValidateDvcpointcalculatorResortCollectionView runs the validations defined
// on DvcpointcalculatorResortCollectionView using the "default" view.
func ValidateDvcpointcalculatorResortCollectionView(result DvcpointcalculatorResortCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateDvcpointcalculatorResortView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDvcpointcalculatorResortCollectionViewResortOnly runs the
// validations defined on DvcpointcalculatorResortCollectionView using the
// "resortOnly" view.
func ValidateDvcpointcalculatorResortCollectionViewResortOnly(result DvcpointcalculatorResortCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateDvcpointcalculatorResortViewResortOnly(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDvcpointcalculatorResortCollectionViewResortUpdate runs the
// validations defined on DvcpointcalculatorResortCollectionView using the
// "resortUpdate" view.
func ValidateDvcpointcalculatorResortCollectionViewResortUpdate(result DvcpointcalculatorResortCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateDvcpointcalculatorResortViewResortUpdate(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDvcpointcalculatorResortView runs the validations defined on
// DvcpointcalculatorResortView using the "default" view.
func ValidateDvcpointcalculatorResortView(result *DvcpointcalculatorResortView) (err error) {
	if result.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.code", *result.Code, "[a-z]{3}"))
	}
	for _, e := range result.RoomTypes {
		if e != nil {
			if err2 := ValidateRoomTypeView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDvcpointcalculatorResortViewResortOnly runs the validations defined
// on DvcpointcalculatorResortView using the "resortOnly" view.
func ValidateDvcpointcalculatorResortViewResortOnly(result *DvcpointcalculatorResortView) (err error) {
	if result.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.code", *result.Code, "[a-z]{3}"))
	}
	return
}

// ValidateDvcpointcalculatorResortViewResortUpdate runs the validations
// defined on DvcpointcalculatorResortView using the "resortUpdate" view.
func ValidateDvcpointcalculatorResortViewResortUpdate(result *DvcpointcalculatorResortView) (err error) {

	return
}

// ValidateRoomTypeView runs the validations defined on RoomTypeView.
func ValidateRoomTypeView(result *RoomTypeView) (err error) {
	if result.Code != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.code", *result.Code, "[a-z0-9]{3}"))
	}
	return
}
