// Code generated by goa v3.8.2, DO NOT EDIT.
//
// dvcPointsCalculator endpoints
//
// Command:
// $ goa gen github.com/danapsimer/dvc-points-calculator/api/goa/design -o
// api/goa

package dvcpointscalculator

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "dvcPointsCalculator" service endpoints.
type Endpoints struct {
	GetResorts goa.Endpoint
	GetResort  goa.Endpoint
}

// NewEndpoints wraps the methods of the "dvcPointsCalculator" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetResorts: NewGetResortsEndpoint(s),
		GetResort:  NewGetResortEndpoint(s),
	}
}

// Use applies the given middleware to all the "dvcPointsCalculator" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetResorts = m(e.GetResorts)
	e.GetResort = m(e.GetResort)
}

// NewGetResortsEndpoint returns an endpoint function that calls the method
// "GetResorts" of service "dvcPointsCalculator".
func NewGetResortsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, view, err := s.GetResorts(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedDvcpointcalculatorResortCollection(res, view)
		return vres, nil
	}
}

// NewGetResortEndpoint returns an endpoint function that calls the method
// "GetResort" of service "dvcPointsCalculator".
func NewGetResortEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetResortPayload)
		res, view, err := s.GetResort(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedDvcpointcalculatorResort(res, view)
		return vres, nil
	}
}
